
Byggern gruppe 36.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000006ea  0000077e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080013e  0080013e  000007bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c34  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9c  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea4  00000000  00000000  000033e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  00004284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079f  00000000  00000000  00004704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e97  00000000  00000000  00004ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00005d3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea ee       	ldi	r30, 0xEA	; 234
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 33       	cpi	r26, 0x3E	; 62
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ae e3       	ldi	r26, 0x3E	; 62
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 34       	cpi	r26, 0x48	; 72
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  a6:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_timer>:
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	81 bb       	out	0x11, r24	; 17
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	8f bd       	out	0x2f, r24	; 47
  b8:	89 e0       	ldi	r24, 0x09	; 9
  ba:	8e bd       	out	0x2e, r24	; 46
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	81 bf       	out	0x31, r24	; 49
  c0:	08 95       	ret

000000c2 <button_init>:
#include <avr/io.h>

void button_init( void ){
	SFIOR &= ~(1 << PUD);
  c2:	80 b7       	in	r24, 0x30	; 48
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	80 bf       	out	0x30, r24	; 48
	DDRB &= ~(1<<PB2); // PIN B2 as input
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB2); // Enable internal pull up on PB2
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	08 95       	ret

000000d6 <main>:
volatile uint8_t* oled_data = (uint8_t*)0x1200;


int main(void)
{
	xmem_init ();
  d6:	0e 94 ad 01 	call	0x35a	; 0x35a <xmem_init>
	button_init();
  da:	0e 94 61 00 	call	0xc2	; 0xc2 <button_init>
	adc_timer();
  de:	0e 94 57 00 	call	0xae	; 0xae <adc_timer>
	UART_Init();
  e2:	0e 94 a3 01 	call	0x346	; 0x346 <UART_Init>
	oled_init();
  e6:	0e 94 3a 01 	call	0x274	; 0x274 <oled_init>
	oled_clear();
  ea:	0e 94 03 01 	call	0x206	; 0x206 <oled_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	9e e0       	ldi	r25, 0x0E	; 14
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x1e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x28>
  fe:	00 00       	nop
	_delay_ms(1000);
	uint8_t row = 0;
	uint8_t column = 0;
	oled_pos(row,column);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 21 01 	call	0x242	; 0x242 <oled_pos>
	
	
	spi_master_init();
 108:	0e 94 85 01 	call	0x30a	; 0x30a <spi_master_init>
	
	mcp2515_init();
 10c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <mcp2515_init>
	
	
	
	mcp2515_write(MCP_CANCTRL,MODE_LOOPBACK);
 110:	60 e4       	ldi	r22, 0x40	; 64
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	0e 94 aa 00 	call	0x154	; 0x154 <mcp2515_write>
	ss_select();
 118:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ss_select>
	mcp2515_read(0b00001111);
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	0e 94 98 00 	call	0x130	; 0x130 <mcp2515_read>
	spi_recieve();
 122:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_recieve>
	ss_deselect();
 126:	0e 94 81 01 	call	0x302	; 0x302 <ss_deselect>
	//ss_select();
	//mcp2515_read(0b00001111);
	//spi_recieve();
	//ss_deselect();
	//}
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	08 95       	ret

00000130 <mcp2515_read>:
	spi_transmit(MCP_BITMOD);
	spi_transmit(address);
	spi_transmit(mask);
	spi_transmit(data);
	ss_deselect();
}
 130:	cf 93       	push	r28
 132:	c8 2f       	mov	r28, r24
 134:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ss_select>
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	0e 94 8a 01 	call	0x314	; 0x314 <spi_transmit>
 13e:	8c 2f       	mov	r24, r28
 140:	0e 94 8a 01 	call	0x314	; 0x314 <spi_transmit>
 144:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_recieve>
 148:	c8 2f       	mov	r28, r24
 14a:	0e 94 81 01 	call	0x302	; 0x302 <ss_deselect>
 14e:	8c 2f       	mov	r24, r28
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <mcp2515_write>:
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	d8 2f       	mov	r29, r24
 15a:	c6 2f       	mov	r28, r22
 15c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ss_select>
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 8a 01 	call	0x314	; 0x314 <spi_transmit>
 166:	8d 2f       	mov	r24, r29
 168:	0e 94 8a 01 	call	0x314	; 0x314 <spi_transmit>
 16c:	8c 2f       	mov	r24, r28
 16e:	0e 94 8a 01 	call	0x314	; 0x314 <spi_transmit>
 172:	0e 94 81 01 	call	0x302	; 0x302 <ss_deselect>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <mcp2515_reset>:

void mcp2515_reset ( void ) {
	ss_select();
 17c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ss_select>
	spi_transmit(MCP_RESET);
 180:	80 ec       	ldi	r24, 0xC0	; 192
 182:	0e 94 8a 01 	call	0x314	; 0x314 <spi_transmit>
	ss_deselect();
 186:	0e 94 81 01 	call	0x302	; 0x302 <ss_deselect>
 18a:	08 95       	ret

0000018c <mcp_read_pointer>:
}

void mcp_read_pointer ( uint8_t address, uint8_t* value ) {
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	18 2f       	mov	r17, r24
 194:	eb 01       	movw	r28, r22
	uint8_t data_out;
	ss_select();
 196:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ss_select>
	spi_transmit(MCP_READ);
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	0e 94 8a 01 	call	0x314	; 0x314 <spi_transmit>
	spi_transmit(address);
 1a0:	81 2f       	mov	r24, r17
 1a2:	0e 94 8a 01 	call	0x314	; 0x314 <spi_transmit>
	data_out = spi_recieve();
 1a6:	0e 94 8e 01 	call	0x31c	; 0x31c <spi_recieve>
 1aa:	18 2f       	mov	r17, r24
	ss_deselect();
 1ac:	0e 94 81 01 	call	0x302	; 0x302 <ss_deselect>
	
	*value = data_out;
 1b0:	18 83       	st	Y, r17
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	08 95       	ret

000001ba <mcp2515_init>:


uint8_t mcp2515_init ( void ) {
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	1f 92       	push	r1
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t value = 1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	89 83       	std	Y+1, r24	; 0x01
	spi_master_init () ; // Initialize SPI
 1c8:	0e 94 85 01 	call	0x30a	; 0x30a <spi_master_init>
	mcp2515_reset () ; // Send reset - command
 1cc:	0e 94 be 00 	call	0x17c	; 0x17c <mcp2515_reset>
	// Self - test
	mcp_read_pointer ( MCP_CANSTAT, &value );
 1d0:	be 01       	movw	r22, r28
 1d2:	6f 5f       	subi	r22, 0xFF	; 255
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	8e e0       	ldi	r24, 0x0E	; 14
 1d8:	0e 94 c6 00 	call	0x18c	; 0x18c <mcp_read_pointer>
	if (( value & MODE_MASK ) != MODE_CONFIG ) {
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	80 7e       	andi	r24, 0xE0	; 224
 1e0:	80 38       	cpi	r24, 0x80	; 128
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <mcp2515_init+0x36>
		printf (" MCP2515 is NOT in configuration mode after reset !\n");
 1e4:	8a e0       	ldi	r24, 0x0A	; 10
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <puts>
		return 1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <mcp2515_init+0x38>
	}
	// More initialization
	return 0;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
}
 1f2:	0f 90       	pop	r0
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <oled_write_command>:
 1fa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_address>
 1fe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_address+0x1>
 202:	80 83       	st	Z, r24
 204:	08 95       	ret

00000206 <oled_clear>:
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	d0 e0       	ldi	r29, 0x00	; 0
 20e:	13 c0       	rjmp	.+38     	; 0x236 <oled_clear+0x30>
 210:	8c 2f       	mov	r24, r28
 212:	80 55       	subi	r24, 0x50	; 80
 214:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 c0       	rjmp	.+16     	; 0x22e <oled_clear+0x28>
 21e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data_address>
 222:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data_address+0x1>
 226:	ec 0f       	add	r30, r28
 228:	fd 1f       	adc	r31, r29
 22a:	10 82       	st	Z, r1
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	80 38       	cpi	r24, 0x80	; 128
 230:	91 05       	cpc	r25, r1
 232:	ac f3       	brlt	.-22     	; 0x21e <oled_clear+0x18>
 234:	21 96       	adiw	r28, 0x01	; 1
 236:	c8 30       	cpi	r28, 0x08	; 8
 238:	d1 05       	cpc	r29, r1
 23a:	54 f3       	brlt	.-44     	; 0x210 <oled_clear+0xa>
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <oled_pos>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	d8 2f       	mov	r29, r24
 248:	c6 2f       	mov	r28, r22
 24a:	82 e2       	ldi	r24, 0x22	; 34
 24c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 250:	8d 2f       	mov	r24, r29
 252:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 25c:	81 e2       	ldi	r24, 0x21	; 33
 25e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 262:	8c 2f       	mov	r24, r28
 264:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 268:	8f e7       	ldi	r24, 0x7F	; 127
 26a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <oled_init>:
 274:	8e ea       	ldi	r24, 0xAE	; 174
 276:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 27a:	81 ea       	ldi	r24, 0xA1	; 161
 27c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 280:	8a ed       	ldi	r24, 0xDA	; 218
 282:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 286:	82 e1       	ldi	r24, 0x12	; 18
 288:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 28c:	88 ec       	ldi	r24, 0xC8	; 200
 28e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 292:	88 ea       	ldi	r24, 0xA8	; 168
 294:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 298:	8f e3       	ldi	r24, 0x3F	; 63
 29a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 29e:	85 ed       	ldi	r24, 0xD5	; 213
 2a0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2a4:	80 e8       	ldi	r24, 0x80	; 128
 2a6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2aa:	81 e8       	ldi	r24, 0x81	; 129
 2ac:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2b0:	80 e5       	ldi	r24, 0x50	; 80
 2b2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2b6:	89 ed       	ldi	r24, 0xD9	; 217
 2b8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2bc:	81 e2       	ldi	r24, 0x21	; 33
 2be:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2c2:	80 e2       	ldi	r24, 0x20	; 32
 2c4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2ce:	8b ed       	ldi	r24, 0xDB	; 219
 2d0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2d4:	80 e3       	ldi	r24, 0x30	; 48
 2d6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2da:	8d ea       	ldi	r24, 0xAD	; 173
 2dc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2e6:	84 ea       	ldi	r24, 0xA4	; 164
 2e8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2ec:	86 ea       	ldi	r24, 0xA6	; 166
 2ee:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2f2:	8f ea       	ldi	r24, 0xAF	; 175
 2f4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <oled_write_command>
 2f8:	08 95       	ret

000002fa <ss_select>:
#define F_CPU 4915200 // Clock Speed

#include <util/delay.h>

void ss_select ( void ){
	PORTB &= (~(1 << PB4));
 2fa:	88 b3       	in	r24, 0x18	; 24
 2fc:	8f 7e       	andi	r24, 0xEF	; 239
 2fe:	88 bb       	out	0x18, r24	; 24
 300:	08 95       	ret

00000302 <ss_deselect>:
}

void ss_deselect ( void ){
	PORTB |= (1 << PB4);
 302:	88 b3       	in	r24, 0x18	; 24
 304:	80 61       	ori	r24, 0x10	; 16
 306:	88 bb       	out	0x18, r24	; 24
 308:	08 95       	ret

0000030a <spi_master_init>:
}

void spi_master_init(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<PB4)|(1<<PB5)|(1<<PB7);
 30a:	80 eb       	ldi	r24, 0xB0	; 176
 30c:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); // Tror vi er i SPI mode 0, fordi CPOL og CPHA = 0
 30e:	81 e5       	ldi	r24, 0x51	; 81
 310:	8d b9       	out	0x0d, r24	; 13
 312:	08 95       	ret

00000314 <spi_transmit>:

}
void spi_transmit (char cData)
{
	/* Start transmission */
	SPDR = cData;
 314:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 316:	77 9b       	sbis	0x0e, 7	; 14
 318:	fe cf       	rjmp	.-4      	; 0x316 <spi_transmit+0x2>
	;
}
 31a:	08 95       	ret

0000031c <spi_recieve>:

char spi_recieve( void )
{
	SPDR = 0xFF;
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 320:	77 9b       	sbis	0x0e, 7	; 14
 322:	fe cf       	rjmp	.-4      	; 0x320 <spi_recieve+0x4>
	;
	return SPDR;
 324:	8f b1       	in	r24, 0x0f	; 15
}
 326:	08 95       	ret

00000328 <UART_Transmit>:
 328:	5d 9b       	sbis	0x0b, 5	; 11
 32a:	fe cf       	rjmp	.-4      	; 0x328 <UART_Transmit>
 32c:	8c b9       	out	0x0c, r24	; 12
 32e:	08 95       	ret

00000330 <UART_Receive>:
 330:	5f 9b       	sbis	0x0b, 7	; 11
 332:	fe cf       	rjmp	.-4      	; 0x330 <UART_Receive>
 334:	8c b1       	in	r24, 0x0c	; 12
 336:	08 95       	ret

00000338 <UART_printf_link>:
 338:	68 e9       	ldi	r22, 0x98	; 152
 33a:	71 e0       	ldi	r23, 0x01	; 1
 33c:	84 e9       	ldi	r24, 0x94	; 148
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 b4 01 	call	0x368	; 0x368 <fdevopen>
 344:	08 95       	ret

00000346 <UART_Init>:
 346:	10 bc       	out	0x20, r1	; 32
 348:	8f e1       	ldi	r24, 0x1F	; 31
 34a:	89 b9       	out	0x09, r24	; 9
 34c:	88 e1       	ldi	r24, 0x18	; 24
 34e:	8a b9       	out	0x0a, r24	; 10
 350:	8e e8       	ldi	r24, 0x8E	; 142
 352:	80 bd       	out	0x20, r24	; 32
 354:	0e 94 9c 01 	call	0x338	; 0x338 <UART_printf_link>
 358:	08 95       	ret

0000035a <xmem_init>:
 35a:	85 b7       	in	r24, 0x35	; 53
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	85 bf       	out	0x35, r24	; 53
 360:	80 b7       	in	r24, 0x30	; 48
 362:	80 62       	ori	r24, 0x20	; 32
 364:	80 bf       	out	0x30, r24	; 48
 366:	08 95       	ret

00000368 <fdevopen>:
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 97       	sbiw	r24, 0x00	; 0
 372:	31 f4       	brne	.+12     	; 0x380 <fdevopen+0x18>
 374:	61 15       	cp	r22, r1
 376:	71 05       	cpc	r23, r1
 378:	19 f4       	brne	.+6      	; 0x380 <fdevopen+0x18>
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	3a c0       	rjmp	.+116    	; 0x3f4 <fdevopen+0x8c>
 380:	8b 01       	movw	r16, r22
 382:	ec 01       	movw	r28, r24
 384:	6e e0       	ldi	r22, 0x0E	; 14
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 2f 02 	call	0x45e	; 0x45e <calloc>
 390:	fc 01       	movw	r30, r24
 392:	89 2b       	or	r24, r25
 394:	91 f3       	breq	.-28     	; 0x37a <fdevopen+0x12>
 396:	80 e8       	ldi	r24, 0x80	; 128
 398:	83 83       	std	Z+3, r24	; 0x03
 39a:	01 15       	cp	r16, r1
 39c:	11 05       	cpc	r17, r1
 39e:	71 f0       	breq	.+28     	; 0x3bc <fdevopen+0x54>
 3a0:	13 87       	std	Z+11, r17	; 0x0b
 3a2:	02 87       	std	Z+10, r16	; 0x0a
 3a4:	81 e8       	ldi	r24, 0x81	; 129
 3a6:	83 83       	std	Z+3, r24	; 0x03
 3a8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 3ac:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
 3b0:	89 2b       	or	r24, r25
 3b2:	21 f4       	brne	.+8      	; 0x3bc <fdevopen+0x54>
 3b4:	f0 93 3f 01 	sts	0x013F, r31	; 0x80013f <__data_end+0x1>
 3b8:	e0 93 3e 01 	sts	0x013E, r30	; 0x80013e <__data_end>
 3bc:	20 97       	sbiw	r28, 0x00	; 0
 3be:	c9 f0       	breq	.+50     	; 0x3f2 <fdevopen+0x8a>
 3c0:	d1 87       	std	Z+9, r29	; 0x09
 3c2:	c0 87       	std	Z+8, r28	; 0x08
 3c4:	83 81       	ldd	r24, Z+3	; 0x03
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	83 83       	std	Z+3, r24	; 0x03
 3ca:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end+0x2>
 3ce:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x3>
 3d2:	89 2b       	or	r24, r25
 3d4:	71 f4       	brne	.+28     	; 0x3f2 <fdevopen+0x8a>
 3d6:	f0 93 41 01 	sts	0x0141, r31	; 0x800141 <__data_end+0x3>
 3da:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <__data_end+0x2>
 3de:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end+0x4>
 3e2:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x5>
 3e6:	89 2b       	or	r24, r25
 3e8:	21 f4       	brne	.+8      	; 0x3f2 <fdevopen+0x8a>
 3ea:	f0 93 43 01 	sts	0x0143, r31	; 0x800143 <__data_end+0x5>
 3ee:	e0 93 42 01 	sts	0x0142, r30	; 0x800142 <__data_end+0x4>
 3f2:	cf 01       	movw	r24, r30
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	08 95       	ret

000003fe <puts>:
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__data_end+0x2>
 40a:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <__data_end+0x3>
 40e:	23 81       	ldd	r18, Z+3	; 0x03
 410:	21 ff       	sbrs	r18, 1
 412:	1b c0       	rjmp	.+54     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 414:	8c 01       	movw	r16, r24
 416:	d0 e0       	ldi	r29, 0x00	; 0
 418:	c0 e0       	ldi	r28, 0x00	; 0
 41a:	f8 01       	movw	r30, r16
 41c:	81 91       	ld	r24, Z+
 41e:	8f 01       	movw	r16, r30
 420:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <__data_end+0x2>
 424:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <__data_end+0x3>
 428:	db 01       	movw	r26, r22
 42a:	18 96       	adiw	r26, 0x08	; 8
 42c:	ed 91       	ld	r30, X+
 42e:	fc 91       	ld	r31, X
 430:	19 97       	sbiw	r26, 0x09	; 9
 432:	88 23       	and	r24, r24
 434:	31 f0       	breq	.+12     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 436:	09 95       	icall
 438:	89 2b       	or	r24, r25
 43a:	79 f3       	breq	.-34     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 43c:	df ef       	ldi	r29, 0xFF	; 255
 43e:	cf ef       	ldi	r28, 0xFF	; 255
 440:	ec cf       	rjmp	.-40     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 442:	8a e0       	ldi	r24, 0x0A	; 10
 444:	09 95       	icall
 446:	89 2b       	or	r24, r25
 448:	19 f0       	breq	.+6      	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	9f ef       	ldi	r25, 0xFF	; 255
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__DATA_REGION_LENGTH__+0x54>
 450:	8d 2f       	mov	r24, r29
 452:	9c 2f       	mov	r25, r28
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <calloc>:
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	86 9f       	mul	r24, r22
 468:	80 01       	movw	r16, r0
 46a:	87 9f       	mul	r24, r23
 46c:	10 0d       	add	r17, r0
 46e:	96 9f       	mul	r25, r22
 470:	10 0d       	add	r17, r0
 472:	11 24       	eor	r1, r1
 474:	c8 01       	movw	r24, r16
 476:	0e 94 4b 02 	call	0x496	; 0x496 <malloc>
 47a:	ec 01       	movw	r28, r24
 47c:	00 97       	sbiw	r24, 0x00	; 0
 47e:	29 f0       	breq	.+10     	; 0x48a <calloc+0x2c>
 480:	a8 01       	movw	r20, r16
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <memset>
 48a:	ce 01       	movw	r24, r28
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	08 95       	ret

00000496 <malloc>:
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	91 05       	cpc	r25, r1
 4a2:	10 f4       	brcc	.+4      	; 0x4a8 <malloc+0x12>
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <__flp>
 4ac:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <__flp+0x1>
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	a0 e0       	ldi	r26, 0x00	; 0
 4b6:	b0 e0       	ldi	r27, 0x00	; 0
 4b8:	30 97       	sbiw	r30, 0x00	; 0
 4ba:	19 f1       	breq	.+70     	; 0x502 <__stack+0x3>
 4bc:	40 81       	ld	r20, Z
 4be:	51 81       	ldd	r21, Z+1	; 0x01
 4c0:	02 81       	ldd	r16, Z+2	; 0x02
 4c2:	13 81       	ldd	r17, Z+3	; 0x03
 4c4:	48 17       	cp	r20, r24
 4c6:	59 07       	cpc	r21, r25
 4c8:	c8 f0       	brcs	.+50     	; 0x4fc <malloc+0x66>
 4ca:	84 17       	cp	r24, r20
 4cc:	95 07       	cpc	r25, r21
 4ce:	69 f4       	brne	.+26     	; 0x4ea <malloc+0x54>
 4d0:	10 97       	sbiw	r26, 0x00	; 0
 4d2:	31 f0       	breq	.+12     	; 0x4e0 <malloc+0x4a>
 4d4:	12 96       	adiw	r26, 0x02	; 2
 4d6:	0c 93       	st	X, r16
 4d8:	12 97       	sbiw	r26, 0x02	; 2
 4da:	13 96       	adiw	r26, 0x03	; 3
 4dc:	1c 93       	st	X, r17
 4de:	27 c0       	rjmp	.+78     	; 0x52e <__stack+0x2f>
 4e0:	00 93 46 01 	sts	0x0146, r16	; 0x800146 <__flp>
 4e4:	10 93 47 01 	sts	0x0147, r17	; 0x800147 <__flp+0x1>
 4e8:	22 c0       	rjmp	.+68     	; 0x52e <__stack+0x2f>
 4ea:	21 15       	cp	r18, r1
 4ec:	31 05       	cpc	r19, r1
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <malloc+0x60>
 4f0:	42 17       	cp	r20, r18
 4f2:	53 07       	cpc	r21, r19
 4f4:	18 f4       	brcc	.+6      	; 0x4fc <malloc+0x66>
 4f6:	9a 01       	movw	r18, r20
 4f8:	bd 01       	movw	r22, r26
 4fa:	ef 01       	movw	r28, r30
 4fc:	df 01       	movw	r26, r30
 4fe:	f8 01       	movw	r30, r16
 500:	db cf       	rjmp	.-74     	; 0x4b8 <malloc+0x22>
 502:	21 15       	cp	r18, r1
 504:	31 05       	cpc	r19, r1
 506:	f9 f0       	breq	.+62     	; 0x546 <__stack+0x47>
 508:	28 1b       	sub	r18, r24
 50a:	39 0b       	sbc	r19, r25
 50c:	24 30       	cpi	r18, 0x04	; 4
 50e:	31 05       	cpc	r19, r1
 510:	80 f4       	brcc	.+32     	; 0x532 <__stack+0x33>
 512:	8a 81       	ldd	r24, Y+2	; 0x02
 514:	9b 81       	ldd	r25, Y+3	; 0x03
 516:	61 15       	cp	r22, r1
 518:	71 05       	cpc	r23, r1
 51a:	21 f0       	breq	.+8      	; 0x524 <__stack+0x25>
 51c:	fb 01       	movw	r30, r22
 51e:	93 83       	std	Z+3, r25	; 0x03
 520:	82 83       	std	Z+2, r24	; 0x02
 522:	04 c0       	rjmp	.+8      	; 0x52c <__stack+0x2d>
 524:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__flp+0x1>
 528:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__flp>
 52c:	fe 01       	movw	r30, r28
 52e:	32 96       	adiw	r30, 0x02	; 2
 530:	44 c0       	rjmp	.+136    	; 0x5ba <__stack+0xbb>
 532:	fe 01       	movw	r30, r28
 534:	e2 0f       	add	r30, r18
 536:	f3 1f       	adc	r31, r19
 538:	81 93       	st	Z+, r24
 53a:	91 93       	st	Z+, r25
 53c:	22 50       	subi	r18, 0x02	; 2
 53e:	31 09       	sbc	r19, r1
 540:	39 83       	std	Y+1, r19	; 0x01
 542:	28 83       	st	Y, r18
 544:	3a c0       	rjmp	.+116    	; 0x5ba <__stack+0xbb>
 546:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__brkval>
 54a:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__brkval+0x1>
 54e:	23 2b       	or	r18, r19
 550:	41 f4       	brne	.+16     	; 0x562 <__stack+0x63>
 552:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 556:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 55a:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__brkval+0x1>
 55e:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__brkval>
 562:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 566:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 56a:	21 15       	cp	r18, r1
 56c:	31 05       	cpc	r19, r1
 56e:	41 f4       	brne	.+16     	; 0x580 <__stack+0x81>
 570:	2d b7       	in	r18, 0x3d	; 61
 572:	3e b7       	in	r19, 0x3e	; 62
 574:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 578:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 57c:	24 1b       	sub	r18, r20
 57e:	35 0b       	sbc	r19, r21
 580:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__brkval>
 584:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <__brkval+0x1>
 588:	e2 17       	cp	r30, r18
 58a:	f3 07       	cpc	r31, r19
 58c:	a0 f4       	brcc	.+40     	; 0x5b6 <__stack+0xb7>
 58e:	2e 1b       	sub	r18, r30
 590:	3f 0b       	sbc	r19, r31
 592:	28 17       	cp	r18, r24
 594:	39 07       	cpc	r19, r25
 596:	78 f0       	brcs	.+30     	; 0x5b6 <__stack+0xb7>
 598:	ac 01       	movw	r20, r24
 59a:	4e 5f       	subi	r20, 0xFE	; 254
 59c:	5f 4f       	sbci	r21, 0xFF	; 255
 59e:	24 17       	cp	r18, r20
 5a0:	35 07       	cpc	r19, r21
 5a2:	48 f0       	brcs	.+18     	; 0x5b6 <__stack+0xb7>
 5a4:	4e 0f       	add	r20, r30
 5a6:	5f 1f       	adc	r21, r31
 5a8:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__brkval+0x1>
 5ac:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__brkval>
 5b0:	81 93       	st	Z+, r24
 5b2:	91 93       	st	Z+, r25
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <__stack+0xbb>
 5b6:	e0 e0       	ldi	r30, 0x00	; 0
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	cf 01       	movw	r24, r30
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	08 95       	ret

000005c6 <free>:
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	00 97       	sbiw	r24, 0x00	; 0
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <free+0xa>
 5ce:	81 c0       	rjmp	.+258    	; 0x6d2 <free+0x10c>
 5d0:	fc 01       	movw	r30, r24
 5d2:	32 97       	sbiw	r30, 0x02	; 2
 5d4:	13 82       	std	Z+3, r1	; 0x03
 5d6:	12 82       	std	Z+2, r1	; 0x02
 5d8:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <__flp>
 5dc:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <__flp+0x1>
 5e0:	10 97       	sbiw	r26, 0x00	; 0
 5e2:	81 f4       	brne	.+32     	; 0x604 <free+0x3e>
 5e4:	20 81       	ld	r18, Z
 5e6:	31 81       	ldd	r19, Z+1	; 0x01
 5e8:	82 0f       	add	r24, r18
 5ea:	93 1f       	adc	r25, r19
 5ec:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__brkval>
 5f0:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__brkval+0x1>
 5f4:	28 17       	cp	r18, r24
 5f6:	39 07       	cpc	r19, r25
 5f8:	51 f5       	brne	.+84     	; 0x64e <free+0x88>
 5fa:	f0 93 45 01 	sts	0x0145, r31	; 0x800145 <__brkval+0x1>
 5fe:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <__brkval>
 602:	67 c0       	rjmp	.+206    	; 0x6d2 <free+0x10c>
 604:	ed 01       	movw	r28, r26
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	ce 17       	cp	r28, r30
 60c:	df 07       	cpc	r29, r31
 60e:	40 f4       	brcc	.+16     	; 0x620 <free+0x5a>
 610:	4a 81       	ldd	r20, Y+2	; 0x02
 612:	5b 81       	ldd	r21, Y+3	; 0x03
 614:	9e 01       	movw	r18, r28
 616:	41 15       	cp	r20, r1
 618:	51 05       	cpc	r21, r1
 61a:	f1 f0       	breq	.+60     	; 0x658 <free+0x92>
 61c:	ea 01       	movw	r28, r20
 61e:	f5 cf       	rjmp	.-22     	; 0x60a <free+0x44>
 620:	d3 83       	std	Z+3, r29	; 0x03
 622:	c2 83       	std	Z+2, r28	; 0x02
 624:	40 81       	ld	r20, Z
 626:	51 81       	ldd	r21, Z+1	; 0x01
 628:	84 0f       	add	r24, r20
 62a:	95 1f       	adc	r25, r21
 62c:	c8 17       	cp	r28, r24
 62e:	d9 07       	cpc	r29, r25
 630:	59 f4       	brne	.+22     	; 0x648 <free+0x82>
 632:	88 81       	ld	r24, Y
 634:	99 81       	ldd	r25, Y+1	; 0x01
 636:	84 0f       	add	r24, r20
 638:	95 1f       	adc	r25, r21
 63a:	02 96       	adiw	r24, 0x02	; 2
 63c:	91 83       	std	Z+1, r25	; 0x01
 63e:	80 83       	st	Z, r24
 640:	8a 81       	ldd	r24, Y+2	; 0x02
 642:	9b 81       	ldd	r25, Y+3	; 0x03
 644:	93 83       	std	Z+3, r25	; 0x03
 646:	82 83       	std	Z+2, r24	; 0x02
 648:	21 15       	cp	r18, r1
 64a:	31 05       	cpc	r19, r1
 64c:	29 f4       	brne	.+10     	; 0x658 <free+0x92>
 64e:	f0 93 47 01 	sts	0x0147, r31	; 0x800147 <__flp+0x1>
 652:	e0 93 46 01 	sts	0x0146, r30	; 0x800146 <__flp>
 656:	3d c0       	rjmp	.+122    	; 0x6d2 <free+0x10c>
 658:	e9 01       	movw	r28, r18
 65a:	fb 83       	std	Y+3, r31	; 0x03
 65c:	ea 83       	std	Y+2, r30	; 0x02
 65e:	49 91       	ld	r20, Y+
 660:	59 91       	ld	r21, Y+
 662:	c4 0f       	add	r28, r20
 664:	d5 1f       	adc	r29, r21
 666:	ec 17       	cp	r30, r28
 668:	fd 07       	cpc	r31, r29
 66a:	61 f4       	brne	.+24     	; 0x684 <free+0xbe>
 66c:	80 81       	ld	r24, Z
 66e:	91 81       	ldd	r25, Z+1	; 0x01
 670:	84 0f       	add	r24, r20
 672:	95 1f       	adc	r25, r21
 674:	02 96       	adiw	r24, 0x02	; 2
 676:	e9 01       	movw	r28, r18
 678:	99 83       	std	Y+1, r25	; 0x01
 67a:	88 83       	st	Y, r24
 67c:	82 81       	ldd	r24, Z+2	; 0x02
 67e:	93 81       	ldd	r25, Z+3	; 0x03
 680:	9b 83       	std	Y+3, r25	; 0x03
 682:	8a 83       	std	Y+2, r24	; 0x02
 684:	e0 e0       	ldi	r30, 0x00	; 0
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	12 96       	adiw	r26, 0x02	; 2
 68a:	8d 91       	ld	r24, X+
 68c:	9c 91       	ld	r25, X
 68e:	13 97       	sbiw	r26, 0x03	; 3
 690:	00 97       	sbiw	r24, 0x00	; 0
 692:	19 f0       	breq	.+6      	; 0x69a <free+0xd4>
 694:	fd 01       	movw	r30, r26
 696:	dc 01       	movw	r26, r24
 698:	f7 cf       	rjmp	.-18     	; 0x688 <free+0xc2>
 69a:	8d 91       	ld	r24, X+
 69c:	9c 91       	ld	r25, X
 69e:	11 97       	sbiw	r26, 0x01	; 1
 6a0:	9d 01       	movw	r18, r26
 6a2:	2e 5f       	subi	r18, 0xFE	; 254
 6a4:	3f 4f       	sbci	r19, 0xFF	; 255
 6a6:	82 0f       	add	r24, r18
 6a8:	93 1f       	adc	r25, r19
 6aa:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__brkval>
 6ae:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__brkval+0x1>
 6b2:	28 17       	cp	r18, r24
 6b4:	39 07       	cpc	r19, r25
 6b6:	69 f4       	brne	.+26     	; 0x6d2 <free+0x10c>
 6b8:	30 97       	sbiw	r30, 0x00	; 0
 6ba:	29 f4       	brne	.+10     	; 0x6c6 <free+0x100>
 6bc:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__flp+0x1>
 6c0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__flp>
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <free+0x104>
 6c6:	13 82       	std	Z+3, r1	; 0x03
 6c8:	12 82       	std	Z+2, r1	; 0x02
 6ca:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__brkval+0x1>
 6ce:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__brkval>
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	08 95       	ret

000006d8 <memset>:
 6d8:	dc 01       	movw	r26, r24
 6da:	01 c0       	rjmp	.+2      	; 0x6de <memset+0x6>
 6dc:	6d 93       	st	X+, r22
 6de:	41 50       	subi	r20, 0x01	; 1
 6e0:	50 40       	sbci	r21, 0x00	; 0
 6e2:	e0 f7       	brcc	.-8      	; 0x6dc <memset+0x4>
 6e4:	08 95       	ret

000006e6 <_exit>:
 6e6:	f8 94       	cli

000006e8 <__stop_program>:
 6e8:	ff cf       	rjmp	.-2      	; 0x6e8 <__stop_program>
