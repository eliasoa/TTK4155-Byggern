
Byggern gruppe 36.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000238  00800100  00001624  000016b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800338  00800338  000018f0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002745  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010ee  00000000  00000000  0000430d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013dd  00000000  00000000  000053fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ec  00000000  00000000  000067d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d2  00000000  00000000  00006dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000145a  00000000  00000000  00007696  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00008af0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	13 e0       	ldi	r17, 0x03	; 3
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 e2       	ldi	r30, 0x24	; 36
      84:	f6 e1       	ldi	r31, 0x16	; 22
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a8 33       	cpi	r26, 0x38	; 56
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	23 e0       	ldi	r18, 0x03	; 3
      94:	a8 e3       	ldi	r26, 0x38	; 56
      96:	b3 e0       	ldi	r27, 0x03	; 3
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a9 35       	cpi	r26, 0x59	; 89
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 75 04 	call	0x8ea	; 0x8ea <main>
      a6:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_timer>:
#include<util/delay.h>

#define OCR0_VALUE 1

void adc_timer(){						 // Timer for the ADC
	DDRD |= (1 << PD5); 
      ae:	81 b3       	in	r24, 0x11	; 17
      b0:	80 62       	ori	r24, 0x20	; 32
      b2:	81 bb       	out	0x11, r24	; 17
	TCCR1A=(1 << COM1A0);			 	 // Toggle-mode
      b4:	80 e4       	ldi	r24, 0x40	; 64
      b6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B= (1 << WGM12)|(1 << CS10);	 // CTSmode, No scaler
      b8:	89 e0       	ldi	r24, 0x09	; 9
      ba:	8e bd       	out	0x2e, r24	; 46
	OCR0= 1;							 // Put OCR value
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	81 bf       	out	0x31, r24	; 49
      c0:	08 95       	ret

000000c2 <read_adc>:
}

uint8_t read_adc(uint8_t channel){
      c2:	ef 92       	push	r14
      c4:	ff 92       	push	r15
      c6:	0f 93       	push	r16
      c8:	1f 93       	push	r17
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <read_adc+0xe>
      d0:	00 d0       	rcall	.+0      	; 0xd2 <read_adc+0x10>
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
      d6:	08 2f       	mov	r16, r24
	uint8_t data [4]; // Define data array for storing ADC channels
	xmem_write(0x1400,0x00,0x00); // Sends WR and CS to initiate conversion. Writes to ADC using Mux mode 0.
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	94 e1       	ldi	r25, 0x14	; 20
      e2:	0e 94 f7 05 	call	0xbee	; 0xbee <xmem_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e6:	82 e5       	ldi	r24, 0x52	; 82
      e8:	8a 95       	dec	r24
      ea:	f1 f7       	brne	.-4      	; 0xe8 <read_adc+0x26>
	uint8_t t_conv = 50; // Calculates conversion time given by the data sheet
	_delay_us(t_conv); // Wait the conversion time
	
	for (uint8_t i = 0; i < 4; i++){
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	10 c0       	rjmp	.+32     	; 0x110 <read_adc+0x4e>
		data[i] = xmem_read(0x1400,0x00); // Reads through the 4 channels(Mux mode 0) from the ADC and stores them in the data array
      f0:	e1 2e       	mov	r14, r17
      f2:	f1 2c       	mov	r15, r1
      f4:	60 e0       	ldi	r22, 0x00	; 0
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	94 e1       	ldi	r25, 0x14	; 20
      fc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <xmem_read>
     100:	e1 e0       	ldi	r30, 0x01	; 1
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	ec 0f       	add	r30, r28
     106:	fd 1f       	adc	r31, r29
     108:	ee 0d       	add	r30, r14
     10a:	ff 1d       	adc	r31, r15
     10c:	80 83       	st	Z, r24
	uint8_t data [4]; // Define data array for storing ADC channels
	xmem_write(0x1400,0x00,0x00); // Sends WR and CS to initiate conversion. Writes to ADC using Mux mode 0.
	uint8_t t_conv = 50; // Calculates conversion time given by the data sheet
	_delay_us(t_conv); // Wait the conversion time
	
	for (uint8_t i = 0; i < 4; i++){
     10e:	1f 5f       	subi	r17, 0xFF	; 255
     110:	14 30       	cpi	r17, 0x04	; 4
     112:	70 f3       	brcs	.-36     	; 0xf0 <read_adc+0x2e>
		data[i] = xmem_read(0x1400,0x00); // Reads through the 4 channels(Mux mode 0) from the ADC and stores them in the data array
	}
	switch (channel){					// Returns the choosed channel from 0-3
     114:	01 30       	cpi	r16, 0x01	; 1
     116:	41 f0       	breq	.+16     	; 0x128 <read_adc+0x66>
     118:	28 f0       	brcs	.+10     	; 0x124 <read_adc+0x62>
     11a:	02 30       	cpi	r16, 0x02	; 2
     11c:	39 f0       	breq	.+14     	; 0x12c <read_adc+0x6a>
     11e:	03 30       	cpi	r16, 0x03	; 3
     120:	39 f0       	breq	.+14     	; 0x130 <read_adc+0x6e>
     122:	08 c0       	rjmp	.+16     	; 0x134 <read_adc+0x72>
	case 0:	// y-axis
		return data[0];
     124:	89 81       	ldd	r24, Y+1	; 0x01
     126:	07 c0       	rjmp	.+14     	; 0x136 <read_adc+0x74>
		break;
	case 1:	// x-axis
		return data[1];
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	05 c0       	rjmp	.+10     	; 0x136 <read_adc+0x74>
		break;
	case 2:	// Right slider
		return data[2];
     12c:	8b 81       	ldd	r24, Y+3	; 0x03
     12e:	03 c0       	rjmp	.+6      	; 0x136 <read_adc+0x74>
		break;
	case 3:	// Left slider
		return data[3];
     130:	8c 81       	ldd	r24, Y+4	; 0x04
     132:	01 c0       	rjmp	.+2      	; 0x136 <read_adc+0x74>
		break;
	}	
	return 0;
     134:	80 e0       	ldi	r24, 0x00	; 0
} 
     136:	0f 90       	pop	r0
     138:	0f 90       	pop	r0
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	1f 91       	pop	r17
     144:	0f 91       	pop	r16
     146:	ff 90       	pop	r15
     148:	ef 90       	pop	r14
     14a:	08 95       	ret

0000014c <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
     14c:	4f 92       	push	r4
     14e:	5f 92       	push	r5
     150:	6f 92       	push	r6
     152:	7f 92       	push	r7
     154:	af 92       	push	r10
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	29 01       	movw	r4, r18
     16e:	3a 01       	movw	r6, r20
	// code from https://www.arduino.cc/reference/en/language/functions/math/map/
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
     174:	24 19       	sub	r18, r4
     176:	35 09       	sbc	r19, r5
     178:	46 09       	sbc	r20, r6
     17a:	57 09       	sbc	r21, r7
     17c:	89 89       	ldd	r24, Y+17	; 0x11
     17e:	9a 89       	ldd	r25, Y+18	; 0x12
     180:	ab 89       	ldd	r26, Y+19	; 0x13
     182:	bc 89       	ldd	r27, Y+20	; 0x14
     184:	bc 01       	movw	r22, r24
     186:	cd 01       	movw	r24, r26
     188:	6a 19       	sub	r22, r10
     18a:	7b 09       	sbc	r23, r11
     18c:	8c 09       	sbc	r24, r12
     18e:	9d 09       	sbc	r25, r13
     190:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsi3>
     194:	a8 01       	movw	r20, r16
     196:	97 01       	movw	r18, r14
     198:	24 19       	sub	r18, r4
     19a:	35 09       	sbc	r19, r5
     19c:	46 09       	sbc	r20, r6
     19e:	57 09       	sbc	r21, r7
     1a0:	0e 94 11 06 	call	0xc22	; 0xc22 <__divmodsi4>
     1a4:	c6 01       	movw	r24, r12
     1a6:	b5 01       	movw	r22, r10
     1a8:	62 0f       	add	r22, r18
     1aa:	73 1f       	adc	r23, r19
     1ac:	84 1f       	adc	r24, r20
     1ae:	95 1f       	adc	r25, r21
}
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	ff 90       	pop	r15
     1ba:	ef 90       	pop	r14
     1bc:	df 90       	pop	r13
     1be:	cf 90       	pop	r12
     1c0:	bf 90       	pop	r11
     1c2:	af 90       	pop	r10
     1c4:	7f 90       	pop	r7
     1c6:	6f 90       	pop	r6
     1c8:	5f 90       	pop	r5
     1ca:	4f 90       	pop	r4
     1cc:	08 95       	ret

000001ce <joystick_analog_position_percentage>:

 uint8_t joystick_analog_position_percentage (uint8_t analog_value, uint8_t channel){		//Function that returns joystick position in percentage from neutral. Inputs analog value and chosed channel
     1ce:	af 92       	push	r10
     1d0:	bf 92       	push	r11
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
	signed int remapped;																	// Defines remapped variable
	if (channel == 0){																		// If-statement choosing which channel to map
     1de:	61 11       	cpse	r22, r1
     1e0:	41 c0       	rjmp	.+130    	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
		if (analog_value >= 167){															// If-statement that decides which side of joystick neutral to map
     1e2:	87 3a       	cpi	r24, 0xA7	; 167
     1e4:	00 f1       	brcs	.+64     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
		remapped = map(analog_value, 160, 255, 50, 100);										// Stores mapping to variable
     1e6:	68 2f       	mov	r22, r24
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	1f 92       	push	r1
     1f0:	1f 92       	push	r1
     1f2:	1f 92       	push	r1
     1f4:	24 e6       	ldi	r18, 0x64	; 100
     1f6:	2f 93       	push	r18
     1f8:	0f 2e       	mov	r0, r31
     1fa:	f2 e3       	ldi	r31, 0x32	; 50
     1fc:	af 2e       	mov	r10, r31
     1fe:	b1 2c       	mov	r11, r1
     200:	c1 2c       	mov	r12, r1
     202:	d1 2c       	mov	r13, r1
     204:	f0 2d       	mov	r31, r0
     206:	e1 2c       	mov	r14, r1
     208:	f1 2c       	mov	r15, r1
     20a:	87 01       	movw	r16, r14
     20c:	ea 94       	dec	r14
     20e:	20 ea       	ldi	r18, 0xA0	; 160
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	0e 94 a6 00 	call	0x14c	; 0x14c <map>
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	86 2f       	mov	r24, r22
     224:	9e c0       	rjmp	.+316    	; 0x362 <__EEPROM_REGION_LENGTH__+0x162>
		}
		else if (analog_value == 0){
     226:	88 23       	and	r24, r24
     228:	09 f4       	brne	.+2      	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
     22a:	98 c0       	rjmp	.+304    	; 0x35c <__EEPROM_REGION_LENGTH__+0x15c>
			remapped = 0;
		}
		else{
			remapped = map(analog_value, 0, 159, 0, 50);									// Stores mapping to variable
     22c:	68 2f       	mov	r22, r24
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	1f 92       	push	r1
     236:	1f 92       	push	r1
     238:	1f 92       	push	r1
     23a:	22 e3       	ldi	r18, 0x32	; 50
     23c:	2f 93       	push	r18
     23e:	a1 2c       	mov	r10, r1
     240:	b1 2c       	mov	r11, r1
     242:	65 01       	movw	r12, r10
     244:	1f e9       	ldi	r17, 0x9F	; 159
     246:	e1 2e       	mov	r14, r17
     248:	f1 2c       	mov	r15, r1
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	10 e0       	ldi	r17, 0x00	; 0
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	a9 01       	movw	r20, r18
     254:	0e 94 a6 00 	call	0x14c	; 0x14c <map>
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	86 2f       	mov	r24, r22
     262:	7f c0       	rjmp	.+254    	; 0x362 <__EEPROM_REGION_LENGTH__+0x162>
		}	
	}
	else if(channel == 1){
     264:	61 30       	cpi	r22, 0x01	; 1
     266:	f1 f5       	brne	.+124    	; 0x2e4 <__EEPROM_REGION_LENGTH__+0xe4>
		if (analog_value >= 167){															// If-statement that decides which side of joystick neutral to map
     268:	87 3a       	cpi	r24, 0xA7	; 167
     26a:	00 f1       	brcs	.+64     	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
		remapped = map(analog_value, 163, 255, 50, 100);										// Stores mapping to variable
     26c:	68 2f       	mov	r22, r24
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	1f 92       	push	r1
     276:	1f 92       	push	r1
     278:	1f 92       	push	r1
     27a:	24 e6       	ldi	r18, 0x64	; 100
     27c:	2f 93       	push	r18
     27e:	0f 2e       	mov	r0, r31
     280:	f2 e3       	ldi	r31, 0x32	; 50
     282:	af 2e       	mov	r10, r31
     284:	b1 2c       	mov	r11, r1
     286:	c1 2c       	mov	r12, r1
     288:	d1 2c       	mov	r13, r1
     28a:	f0 2d       	mov	r31, r0
     28c:	e1 2c       	mov	r14, r1
     28e:	f1 2c       	mov	r15, r1
     290:	87 01       	movw	r16, r14
     292:	ea 94       	dec	r14
     294:	23 ea       	ldi	r18, 0xA3	; 163
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	0e 94 a6 00 	call	0x14c	; 0x14c <map>
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	86 2f       	mov	r24, r22
     2aa:	5b c0       	rjmp	.+182    	; 0x362 <__EEPROM_REGION_LENGTH__+0x162>
		}
		else{
			remapped = map(analog_value, 0, 162, 0, 50);									// Stores mapping to variable
     2ac:	68 2f       	mov	r22, r24
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	1f 92       	push	r1
     2b6:	1f 92       	push	r1
     2b8:	1f 92       	push	r1
     2ba:	22 e3       	ldi	r18, 0x32	; 50
     2bc:	2f 93       	push	r18
     2be:	a1 2c       	mov	r10, r1
     2c0:	b1 2c       	mov	r11, r1
     2c2:	65 01       	movw	r12, r10
     2c4:	12 ea       	ldi	r17, 0xA2	; 162
     2c6:	e1 2e       	mov	r14, r17
     2c8:	f1 2c       	mov	r15, r1
     2ca:	00 e0       	ldi	r16, 0x00	; 0
     2cc:	10 e0       	ldi	r17, 0x00	; 0
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	a9 01       	movw	r20, r18
     2d4:	0e 94 a6 00 	call	0x14c	; 0x14c <map>
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	86 2f       	mov	r24, r22
     2e2:	3f c0       	rjmp	.+126    	; 0x362 <__EEPROM_REGION_LENGTH__+0x162>
		}	
	}
	else if(channel == 2){
     2e4:	62 30       	cpi	r22, 0x02	; 2
     2e6:	e1 f4       	brne	.+56     	; 0x320 <__EEPROM_REGION_LENGTH__+0x120>
		remapped = map(analog_value, 10, 255, 0, 100);										// Stores mapping to variable
     2e8:	68 2f       	mov	r22, r24
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	1f 92       	push	r1
     2f2:	1f 92       	push	r1
     2f4:	1f 92       	push	r1
     2f6:	24 e6       	ldi	r18, 0x64	; 100
     2f8:	2f 93       	push	r18
     2fa:	a1 2c       	mov	r10, r1
     2fc:	b1 2c       	mov	r11, r1
     2fe:	65 01       	movw	r12, r10
     300:	e1 2c       	mov	r14, r1
     302:	f1 2c       	mov	r15, r1
     304:	87 01       	movw	r16, r14
     306:	ea 94       	dec	r14
     308:	2a e0       	ldi	r18, 0x0A	; 10
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	0e 94 a6 00 	call	0x14c	; 0x14c <map>
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	86 2f       	mov	r24, r22
     31e:	21 c0       	rjmp	.+66     	; 0x362 <__EEPROM_REGION_LENGTH__+0x162>
	}
	else if(channel == 3){
     320:	63 30       	cpi	r22, 0x03	; 3
     322:	f1 f4       	brne	.+60     	; 0x360 <__EEPROM_REGION_LENGTH__+0x160>
		remapped = map(analog_value, 12, 255, 0, 100);										// Stores mapping to variable
     324:	68 2f       	mov	r22, r24
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	1f 92       	push	r1
     32e:	1f 92       	push	r1
     330:	1f 92       	push	r1
     332:	24 e6       	ldi	r18, 0x64	; 100
     334:	2f 93       	push	r18
     336:	a1 2c       	mov	r10, r1
     338:	b1 2c       	mov	r11, r1
     33a:	65 01       	movw	r12, r10
     33c:	e1 2c       	mov	r14, r1
     33e:	f1 2c       	mov	r15, r1
     340:	87 01       	movw	r16, r14
     342:	ea 94       	dec	r14
     344:	2c e0       	ldi	r18, 0x0C	; 12
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	40 e0       	ldi	r20, 0x00	; 0
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	0e 94 a6 00 	call	0x14c	; 0x14c <map>
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	86 2f       	mov	r24, r22
     35a:	03 c0       	rjmp	.+6      	; 0x362 <__EEPROM_REGION_LENGTH__+0x162>
	if (channel == 0){																		// If-statement choosing which channel to map
		if (analog_value >= 167){															// If-statement that decides which side of joystick neutral to map
		remapped = map(analog_value, 160, 255, 50, 100);										// Stores mapping to variable
		}
		else if (analog_value == 0){
			remapped = 0;
     35c:	80 e0       	ldi	r24, 0x00	; 0
		remapped = map(analog_value, 12, 255, 0, 100);										// Stores mapping to variable
	}
	else{
		return 0;										
	}
	return remapped;																		// Returns variable, based on the if- statements
     35e:	01 c0       	rjmp	.+2      	; 0x362 <__EEPROM_REGION_LENGTH__+0x162>
	}
	else if(channel == 3){
		remapped = map(analog_value, 12, 255, 0, 100);										// Stores mapping to variable
	}
	else{
		return 0;										
     360:	80 e0       	ldi	r24, 0x00	; 0
	}
	return remapped;																		// Returns variable, based on the if- statements
}
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	bf 90       	pop	r11
     370:	af 90       	pop	r10
     372:	08 95       	ret

00000374 <button_init>:
#include <avr/io.h>

// To read a button state PINB & (1<<PBx)

void button_init( void ){
	SFIOR &= ~(1 << PUD);
     374:	80 b7       	in	r24, 0x30	; 48
     376:	8b 7f       	andi	r24, 0xFB	; 251
     378:	80 bf       	out	0x30, r24	; 48
	DDRB &= ~(1<<PB2)|(1<<PB1)|(1<<PB0); // PIN B0 B1 B2 as input
     37a:	87 b3       	in	r24, 0x17	; 23
     37c:	8b 7f       	andi	r24, 0xFB	; 251
     37e:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB2)|(1<<PB1)|(1<<PB0); // Enable internal pull up on PB2
     380:	88 b3       	in	r24, 0x18	; 24
     382:	87 60       	ori	r24, 0x07	; 7
     384:	88 bb       	out	0x18, r24	; 24
     386:	08 95       	ret

00000388 <can_init>:
#include "can_driver.h"
#include "mcp2512.h"

uint8_t interrupt_list; 

void can_init( void ){
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	1f 92       	push	r1
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
	mcp2515_init();
     392:	0e 94 18 05 	call	0xa30	; 0xa30 <mcp2515_init>
	
	DDRB |= (1 << PB3);
     396:	87 b3       	in	r24, 0x17	; 23
     398:	88 60       	ori	r24, 0x08	; 8
     39a:	87 bb       	out	0x17, r24	; 23
	
	mcp2515_write(MCP_CNF1, 0b01000011); // SJW = 1 BRP = 3 -> Baudrate 125 kHz Tq = 500
     39c:	63 e4       	ldi	r22, 0x43	; 67
     39e:	8a e2       	ldi	r24, 0x2A	; 42
     3a0:	0e 94 b2 04 	call	0x964	; 0x964 <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0b10110001); // NOE MER PS1 = 6 and PRSEG = 1
     3a4:	61 eb       	ldi	r22, 0xB1	; 177
     3a6:	89 e2       	ldi	r24, 0x29	; 41
     3a8:	0e 94 b2 04 	call	0x964	; 0x964 <mcp2515_write>
	mcp2515_write(MCP_CNF3, 0b00000101); // PS2 = 5
     3ac:	65 e0       	ldi	r22, 0x05	; 5
     3ae:	88 e2       	ldi	r24, 0x28	; 40
     3b0:	0e 94 b2 04 	call	0x964	; 0x964 <mcp2515_write>
	
	
	mcp2515_write(MCP_CANINTE,0b00000011);		// Enable interrupt on Receive buffer 0 and 1
     3b4:	63 e0       	ldi	r22, 0x03	; 3
     3b6:	8b e2       	ldi	r24, 0x2B	; 43
     3b8:	0e 94 b2 04 	call	0x964	; 0x964 <mcp2515_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	9f e8       	ldi	r25, 0x8F	; 143
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <can_init+0x38>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <can_init+0x3e>
     3c6:	00 00       	nop
	_delay_ms(30);
	mcp2515_bit_modify(MCP_CANINTF,0xFF,0x00);
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	6f ef       	ldi	r22, 0xFF	; 255
     3cc:	8c e2       	ldi	r24, 0x2C	; 44
     3ce:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	9f e8       	ldi	r25, 0x8F	; 143
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <can_init+0x4e>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <can_init+0x54>
     3dc:	00 00       	nop
	_delay_ms(30);
	
	mcp2515_write(MCP_RXB0CTRL, 0xFF);			// Turn filters off
     3de:	6f ef       	ldi	r22, 0xFF	; 255
     3e0:	80 e6       	ldi	r24, 0x60	; 96
     3e2:	0e 94 b2 04 	call	0x964	; 0x964 <mcp2515_write>
	mcp2515_write(MCP_RXB1CTRL, 0xFF);			// Turn filters off
     3e6:	6f ef       	ldi	r22, 0xFF	; 255
     3e8:	80 e7       	ldi	r24, 0x70	; 112
     3ea:	0e 94 b2 04 	call	0x964	; 0x964 <mcp2515_write>
	
	
	cli();
     3ee:	f8 94       	cli
	MCUCR |= (1<<ISC01);
     3f0:	85 b7       	in	r24, 0x35	; 53
     3f2:	82 60       	ori	r24, 0x02	; 2
     3f4:	85 bf       	out	0x35, r24	; 53
	MCUCR &= (~(1 << ISC00));
     3f6:	85 b7       	in	r24, 0x35	; 53
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
     3fa:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT1);
     3fc:	8b b7       	in	r24, 0x3b	; 59
     3fe:	80 68       	ori	r24, 0x80	; 128
     400:	8b bf       	out	0x3b, r24	; 59
	DDRD &= ~(1 << PD3);
     402:	81 b3       	in	r24, 0x11	; 17
     404:	87 7f       	andi	r24, 0xF7	; 247
     406:	81 bb       	out	0x11, r24	; 17
	sei();
     408:	78 94       	sei
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	9f e8       	ldi	r25, 0x8F	; 143
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <__DATA_REGION_LENGTH__+0xe>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
     414:	00 00       	nop
	
	_delay_ms(30);
	mcp2515_write(MCP_CANCTRL,MODE_NORMAL);		// Normal
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	8f e0       	ldi	r24, 0x0F	; 15
     41a:	0e 94 b2 04 	call	0x964	; 0x964 <mcp2515_write>
	// TODO: Comment what these do

	
	
	
	uint8_t val = 1;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	89 83       	std	Y+1, r24	; 0x01
	mcp_read_pointer( MCP_CANSTAT, &val );
     422:	be 01       	movw	r22, r28
     424:	6f 5f       	subi	r22, 0xFF	; 255
     426:	7f 4f       	sbci	r23, 0xFF	; 255
     428:	8e e0       	ldi	r24, 0x0E	; 14
     42a:	0e 94 01 05 	call	0xa02	; 0xa02 <mcp_read_pointer>
	
	if ( ( val & MODE_MASK ) == MODE_LOOPBACK )
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	80 7e       	andi	r24, 0xE0	; 224
     432:	80 34       	cpi	r24, 0x40	; 64
     434:	21 f4       	brne	.+8      	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
	{
				printf (" MCP2515 is IN loopback mode after init !\r\n");
     436:	8a e0       	ldi	r24, 0x0A	; 10
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	0e 94 d4 06 	call	0xda8	; 0xda8 <puts>
	}
	if ( ( val & MODE_MASK ) == MODE_NORMAL )
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	80 7e       	andi	r24, 0xE0	; 224
     442:	21 f4       	brne	.+8      	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
	{
		printf (" MCP2515 is IN NORMAL mode after init !\r\n");
     444:	85 e3       	ldi	r24, 0x35	; 53
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	0e 94 d4 06 	call	0xda8	; 0xda8 <puts>
	}	
}
     44c:	0f 90       	pop	r0
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <can_send>:




void can_send( message send ){
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
     464:	2b 97       	sbiw	r28, 0x0b	; 11
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	e9 82       	std	Y+1, r14	; 0x01
     472:	fa 82       	std	Y+2, r15	; 0x02
     474:	0b 83       	std	Y+3, r16	; 0x03
     476:	1c 83       	std	Y+4, r17	; 0x04
     478:	2d 83       	std	Y+5, r18	; 0x05
     47a:	3e 83       	std	Y+6, r19	; 0x06
     47c:	4f 83       	std	Y+7, r20	; 0x07
     47e:	58 87       	std	Y+8, r21	; 0x08
     480:	69 87       	std	Y+9, r22	; 0x09
     482:	7a 87       	std	Y+10, r23	; 0x0a
     484:	8b 87       	std	Y+11, r24	; 0x0b

	mcp2515_write(MCP_TXB0SIDH, (send.id&0b11111111000) >> 3);	// id 8/11 bits
     486:	09 81       	ldd	r16, Y+1	; 0x01
     488:	1a 81       	ldd	r17, Y+2	; 0x02
     48a:	b8 01       	movw	r22, r16
     48c:	68 7f       	andi	r22, 0xF8	; 248
     48e:	77 70       	andi	r23, 0x07	; 7
     490:	76 95       	lsr	r23
     492:	67 95       	ror	r22
     494:	76 95       	lsr	r23
     496:	67 95       	ror	r22
     498:	76 95       	lsr	r23
     49a:	67 95       	ror	r22
     49c:	81 e3       	ldi	r24, 0x31	; 49
     49e:	0e 94 b2 04 	call	0x964	; 0x964 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, (send.id&0b111) << 5);			    // id 3/11 bits from LSB
     4a2:	60 2f       	mov	r22, r16
     4a4:	62 95       	swap	r22
     4a6:	66 0f       	add	r22, r22
     4a8:	60 7e       	andi	r22, 0xE0	; 224
     4aa:	82 e3       	ldi	r24, 0x32	; 50
     4ac:	0e 94 b2 04 	call	0x964	; 0x964 <mcp2515_write>
	//printf("%x\r\n",idlow);
	//printf("ID HIGH\t");
	//printf("%x\r\n",idhigh);
	
	
	mcp2515_write(MCP_TXB0DLC, send.length);					// DLC
     4b0:	fb 80       	ldd	r15, Y+3	; 0x03
     4b2:	6f 2d       	mov	r22, r15
     4b4:	85 e3       	ldi	r24, 0x35	; 53
     4b6:	0e 94 b2 04 	call	0x964	; 0x964 <mcp2515_write>
	
	for (int i = 0; i < send.length; i++){
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	10 e0       	ldi	r17, 0x00	; 0
     4be:	0d c0       	rjmp	.+26     	; 0x4da <can_send+0x86>
		mcp2515_write(MCP_TXB0D0+i, send.data[i]);				// buffer
     4c0:	e4 e0       	ldi	r30, 0x04	; 4
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	ec 0f       	add	r30, r28
     4c6:	fd 1f       	adc	r31, r29
     4c8:	e0 0f       	add	r30, r16
     4ca:	f1 1f       	adc	r31, r17
     4cc:	60 81       	ld	r22, Z
     4ce:	86 e3       	ldi	r24, 0x36	; 54
     4d0:	80 0f       	add	r24, r16
     4d2:	0e 94 b2 04 	call	0x964	; 0x964 <mcp2515_write>
	//printf("%x\r\n",idhigh);
	
	
	mcp2515_write(MCP_TXB0DLC, send.length);					// DLC
	
	for (int i = 0; i < send.length; i++){
     4d6:	0f 5f       	subi	r16, 0xFF	; 255
     4d8:	1f 4f       	sbci	r17, 0xFF	; 255
     4da:	8f 2d       	mov	r24, r15
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	08 17       	cp	r16, r24
     4e0:	19 07       	cpc	r17, r25
     4e2:	74 f3       	brlt	.-36     	; 0x4c0 <can_send+0x6c>
		mcp2515_write(MCP_TXB0D0+i, send.data[i]);				// buffer
	}
	
	mcp2515_rts(0);												// Request to send. Sends buffer if available
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	0e 94 c6 04 	call	0x98c	; 0x98c <mcp2515_rts>
}
     4ea:	2b 96       	adiw	r28, 0x0b	; 11
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	1f 91       	pop	r17
     4fc:	0f 91       	pop	r16
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	08 95       	ret

00000504 <can_receive>:
		mcp2515_bit_modify(MCP_CANINTF, 0b00000010, 0);
	}
}


message can_receive( uint8_t buffer ){
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	8c 01       	movw	r16, r24
	message receive;
	
	if (buffer == 0){
     510:	61 11       	cpse	r22, r1
     512:	2e c0       	rjmp	.+92     	; 0x570 <can_receive+0x6c>
		uint8_t id_low = 0b11100000 & mcp2515_read(MCP_RXB0SIDL);			// read id 3/11 bits from LSB
     514:	82 e6       	ldi	r24, 0x62	; 98
     516:	0e 94 a0 04 	call	0x940	; 0x940 <mcp2515_read>
     51a:	c8 2f       	mov	r28, r24
     51c:	c0 7e       	andi	r28, 0xE0	; 224
		uint8_t id_high = mcp2515_read(MCP_RXB0SIDH);			// read id 8/11 bits from MSB
     51e:	81 e6       	ldi	r24, 0x61	; 97
     520:	0e 94 a0 04 	call	0x940	; 0x940 <mcp2515_read>
		receive.id = (id_high << 3) | (id_low >> 5);
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	c2 95       	swap	r28
     534:	c6 95       	lsr	r28
     536:	c7 70       	andi	r28, 0x07	; 7
     538:	8c 2b       	or	r24, r28
     53a:	f8 01       	movw	r30, r16
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
	
		receive.length = mcp2515_read(MCP_RXB0DLC);				// DLC
     540:	85 e6       	ldi	r24, 0x65	; 101
     542:	0e 94 a0 04 	call	0x940	; 0x940 <mcp2515_read>
     546:	f8 2e       	mov	r15, r24
     548:	f8 01       	movw	r30, r16
     54a:	82 83       	std	Z+2, r24	; 0x02

		for (int i = 0; i < receive.length; i++){
     54c:	c0 e0       	ldi	r28, 0x00	; 0
     54e:	d0 e0       	ldi	r29, 0x00	; 0
     550:	09 c0       	rjmp	.+18     	; 0x564 <can_receive+0x60>
			receive.data[i] = mcp2515_read(MCP_RXB0D0+(uint8_t) i);		// read from buffer 0
     552:	8c 2f       	mov	r24, r28
     554:	8a 59       	subi	r24, 0x9A	; 154
     556:	0e 94 a0 04 	call	0x940	; 0x940 <mcp2515_read>
     55a:	f8 01       	movw	r30, r16
     55c:	ec 0f       	add	r30, r28
     55e:	fd 1f       	adc	r31, r29
     560:	83 83       	std	Z+3, r24	; 0x03
		uint8_t id_high = mcp2515_read(MCP_RXB0SIDH);			// read id 8/11 bits from MSB
		receive.id = (id_high << 3) | (id_low >> 5);
	
		receive.length = mcp2515_read(MCP_RXB0DLC);				// DLC

		for (int i = 0; i < receive.length; i++){
     562:	21 96       	adiw	r28, 0x01	; 1
     564:	8f 2d       	mov	r24, r15
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	c8 17       	cp	r28, r24
     56a:	d9 07       	cpc	r29, r25
     56c:	94 f3       	brlt	.-28     	; 0x552 <can_receive+0x4e>
     56e:	2f c0       	rjmp	.+94     	; 0x5ce <can_receive+0xca>
			receive.data[i] = mcp2515_read(MCP_RXB0D0+(uint8_t) i);		// read from buffer 0
			}
	}
	
	else if (buffer == 1){
     570:	61 30       	cpi	r22, 0x01	; 1
     572:	69 f5       	brne	.+90     	; 0x5ce <can_receive+0xca>
		uint8_t id_low = 0b11100000 & mcp2515_read(MCP_RXB1SIDL);			// read id 3/11 bits from LSB
     574:	82 e7       	ldi	r24, 0x72	; 114
     576:	0e 94 a0 04 	call	0x940	; 0x940 <mcp2515_read>
     57a:	c8 2f       	mov	r28, r24
     57c:	c0 7e       	andi	r28, 0xE0	; 224
		uint8_t id_high = mcp2515_read(MCP_RXB1SIDH);			// read id 8/11 bits from MSB
     57e:	81 e7       	ldi	r24, 0x71	; 113
     580:	0e 94 a0 04 	call	0x940	; 0x940 <mcp2515_read>
		receive.id = (id_high << 3) | (id_low >> 5);
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	c2 95       	swap	r28
     594:	c6 95       	lsr	r28
     596:	c7 70       	andi	r28, 0x07	; 7
     598:	8c 2b       	or	r24, r28
     59a:	f8 01       	movw	r30, r16
     59c:	91 83       	std	Z+1, r25	; 0x01
     59e:	80 83       	st	Z, r24
		
		receive.length = mcp2515_read(MCP_RXB1DLC);				// DLC
     5a0:	85 e7       	ldi	r24, 0x75	; 117
     5a2:	0e 94 a0 04 	call	0x940	; 0x940 <mcp2515_read>
     5a6:	f8 2e       	mov	r15, r24
     5a8:	f8 01       	movw	r30, r16
     5aa:	82 83       	std	Z+2, r24	; 0x02

		for (int i = 0; i < receive.length; i++){
     5ac:	c0 e0       	ldi	r28, 0x00	; 0
     5ae:	d0 e0       	ldi	r29, 0x00	; 0
     5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <can_receive+0xc0>
			receive.data[i] = mcp2515_read(MCP_RXB1D0+i);		// read from buffer 0
     5b2:	8c 2f       	mov	r24, r28
     5b4:	8a 58       	subi	r24, 0x8A	; 138
     5b6:	0e 94 a0 04 	call	0x940	; 0x940 <mcp2515_read>
     5ba:	f8 01       	movw	r30, r16
     5bc:	ec 0f       	add	r30, r28
     5be:	fd 1f       	adc	r31, r29
     5c0:	83 83       	std	Z+3, r24	; 0x03
		uint8_t id_high = mcp2515_read(MCP_RXB1SIDH);			// read id 8/11 bits from MSB
		receive.id = (id_high << 3) | (id_low >> 5);
		
		receive.length = mcp2515_read(MCP_RXB1DLC);				// DLC

		for (int i = 0; i < receive.length; i++){
     5c2:	21 96       	adiw	r28, 0x01	; 1
     5c4:	8f 2d       	mov	r24, r15
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	c8 17       	cp	r28, r24
     5ca:	d9 07       	cpc	r29, r25
     5cc:	94 f3       	brlt	.-28     	; 0x5b2 <can_receive+0xae>
			receive.data[i] = mcp2515_read(MCP_RXB1D0+i);		// read from buffer 0
		}
	}
	return receive;
     5ce:	c8 01       	movw	r24, r16
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	08 95       	ret

000005dc <__vector_2>:
	mcp2515_rts(0);												// Request to send. Sends buffer if available
}



ISR(INT1_vect){
     5dc:	1f 92       	push	r1
     5de:	0f 92       	push	r0
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	0f 92       	push	r0
     5e4:	11 24       	eor	r1, r1
     5e6:	1f 93       	push	r17
     5e8:	2f 93       	push	r18
     5ea:	3f 93       	push	r19
     5ec:	4f 93       	push	r20
     5ee:	5f 93       	push	r21
     5f0:	6f 93       	push	r22
     5f2:	7f 93       	push	r23
     5f4:	8f 93       	push	r24
     5f6:	9f 93       	push	r25
     5f8:	af 93       	push	r26
     5fa:	bf 93       	push	r27
     5fc:	ef 93       	push	r30
     5fe:	ff 93       	push	r31
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
     608:	2b 97       	sbiw	r28, 0x0b	; 11
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	cd bf       	out	0x3d, r28	; 61
	uint8_t interrupt_list[1] = {0};
	uint8_t interrupt_flag = mcp2515_read(MCP_CANINTF);
     60e:	8c e2       	ldi	r24, 0x2C	; 44
     610:	0e 94 a0 04 	call	0x940	; 0x940 <mcp2515_read>
	interrupt_list[0] = (interrupt_flag & MCP_RX0IF);	// Checks if Receive Buffer 0 is full by bit masking  01 & 01 = 01
	interrupt_list[1] = (interrupt_flag & MCP_RX1IF);	// Checks if Receive Buffer 1 is full by bit masking  01 & 01 = 01
     614:	98 2f       	mov	r25, r24
     616:	92 70       	andi	r25, 0x02	; 2
	
	if (interrupt_list[0]){
     618:	80 ff       	sbrs	r24, 0
     61a:	4c c0       	rjmp	.+152    	; 0x6b4 <__vector_2+0xd8>
		message1 = can_receive(0);
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	ce 01       	movw	r24, r28
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	0e 94 82 02 	call	0x504	; 0x504 <can_receive>
     626:	8b e0       	ldi	r24, 0x0B	; 11
     628:	fe 01       	movw	r30, r28
     62a:	31 96       	adiw	r30, 0x01	; 1
     62c:	a8 e3       	ldi	r26, 0x38	; 56
     62e:	b3 e0       	ldi	r27, 0x03	; 3
     630:	01 90       	ld	r0, Z+
     632:	0d 92       	st	X+, r0
     634:	8a 95       	dec	r24
     636:	e1 f7       	brne	.-8      	; 0x630 <__vector_2+0x54>
		//printf("I_L 0\r\n");
		//printf("%i\t",message1.length);
		printf("\r\n################# NEW MESSAGE ###########\r\n");
     638:	8e e5       	ldi	r24, 0x5E	; 94
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	0e 94 d4 06 	call	0xda8	; 0xda8 <puts>
		printf("Received message on buffer 1:\t");
     640:	8b e8       	ldi	r24, 0x8B	; 139
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
		for (uint8_t i = 0; i < message1.length; i++ )
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	09 c0       	rjmp	.+18     	; 0x666 <__vector_2+0x8a>
		{
			printf("%c",message1.data[i]);
     654:	e1 2f       	mov	r30, r17
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	e8 5c       	subi	r30, 0xC8	; 200
     65a:	fc 4f       	sbci	r31, 0xFC	; 252
     65c:	83 81       	ldd	r24, Z+3	; 0x03
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 cd 06 	call	0xd9a	; 0xd9a <putchar>
		message1 = can_receive(0);
		//printf("I_L 0\r\n");
		//printf("%i\t",message1.length);
		printf("\r\n################# NEW MESSAGE ###########\r\n");
		printf("Received message on buffer 1:\t");
		for (uint8_t i = 0; i < message1.length; i++ )
     664:	1f 5f       	subi	r17, 0xFF	; 255
     666:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <__data_end+0x2>
     66a:	18 17       	cp	r17, r24
     66c:	98 f3       	brcs	.-26     	; 0x654 <__vector_2+0x78>
		{
			printf("%c",message1.data[i]);
		}
		printf("\r\nwith data lengt:\t%d\n\r",message1.length);
     66e:	1f 92       	push	r1
     670:	8f 93       	push	r24
     672:	8a ea       	ldi	r24, 0xAA	; 170
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
		printf("ID:\t%d\r\n",message1.id);
     67e:	e8 e3       	ldi	r30, 0x38	; 56
     680:	f3 e0       	ldi	r31, 0x03	; 3
     682:	81 81       	ldd	r24, Z+1	; 0x01
     684:	8f 93       	push	r24
     686:	80 81       	ld	r24, Z
     688:	8f 93       	push	r24
     68a:	82 ec       	ldi	r24, 0xC2	; 194
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	9f 93       	push	r25
     690:	8f 93       	push	r24
     692:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
		printf("\r\n");
     696:	8d e9       	ldi	r24, 0x9D	; 157
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	0e 94 d4 06 	call	0xda8	; 0xda8 <puts>
		mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0);
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	8c e2       	ldi	r24, 0x2C	; 44
     6a4:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	52 c0       	rjmp	.+164    	; 0x758 <__vector_2+0x17c>
	}
	else if(interrupt_list[1]){
     6b4:	99 23       	and	r25, r25
     6b6:	09 f4       	brne	.+2      	; 0x6ba <__vector_2+0xde>
     6b8:	4f c0       	rjmp	.+158    	; 0x758 <__vector_2+0x17c>
		message2 = can_receive(1);
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	0e 94 82 02 	call	0x504	; 0x504 <can_receive>
     6c4:	8b e0       	ldi	r24, 0x0B	; 11
     6c6:	fe 01       	movw	r30, r28
     6c8:	31 96       	adiw	r30, 0x01	; 1
     6ca:	a4 e4       	ldi	r26, 0x44	; 68
     6cc:	b3 e0       	ldi	r27, 0x03	; 3
     6ce:	01 90       	ld	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	8a 95       	dec	r24
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <__vector_2+0xf2>
		printf("\r\n################# NEW MESSAGE ###########\r\n");
     6d6:	8e e5       	ldi	r24, 0x5E	; 94
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 d4 06 	call	0xda8	; 0xda8 <puts>
		printf("Received message on buffer 2:\t");
     6de:	8b ec       	ldi	r24, 0xCB	; 203
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
		for (uint8_t i = 0; i < message2.length; i++ )
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	10 e0       	ldi	r17, 0x00	; 0
     6f0:	09 c0       	rjmp	.+18     	; 0x704 <__vector_2+0x128>
		{
			printf("%c",message2.data[i]);
     6f2:	e1 2f       	mov	r30, r17
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	ec 5b       	subi	r30, 0xBC	; 188
     6f8:	fc 4f       	sbci	r31, 0xFC	; 252
     6fa:	83 81       	ldd	r24, Z+3	; 0x03
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 cd 06 	call	0xd9a	; 0xd9a <putchar>
	}
	else if(interrupt_list[1]){
		message2 = can_receive(1);
		printf("\r\n################# NEW MESSAGE ###########\r\n");
		printf("Received message on buffer 2:\t");
		for (uint8_t i = 0; i < message2.length; i++ )
     702:	1f 5f       	subi	r17, 0xFF	; 255
     704:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <message2+0x2>
     708:	18 17       	cp	r17, r24
     70a:	98 f3       	brcs	.-26     	; 0x6f2 <__vector_2+0x116>
		{
			printf("%c",message2.data[i]);
		}
		printf("\r\nwith data lengt:\t%d\n\r",message2.length);
     70c:	1f 92       	push	r1
     70e:	8f 93       	push	r24
     710:	8a ea       	ldi	r24, 0xAA	; 170
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	9f 93       	push	r25
     716:	8f 93       	push	r24
     718:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
		printf("ID:\t%d\r\n",message2.id);
     71c:	e4 e4       	ldi	r30, 0x44	; 68
     71e:	f3 e0       	ldi	r31, 0x03	; 3
     720:	81 81       	ldd	r24, Z+1	; 0x01
     722:	8f 93       	push	r24
     724:	80 81       	ld	r24, Z
     726:	8f 93       	push	r24
     728:	82 ec       	ldi	r24, 0xC2	; 194
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
		printf("\r\n");
     734:	8d e9       	ldi	r24, 0x9D	; 157
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	0e 94 d4 06 	call	0xda8	; 0xda8 <puts>
		printf("\r\n");
     73c:	8d e9       	ldi	r24, 0x9D	; 157
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	0e 94 d4 06 	call	0xda8	; 0xda8 <puts>
		mcp2515_bit_modify(MCP_CANINTF, 0b00000010, 0);
     744:	40 e0       	ldi	r20, 0x00	; 0
     746:	62 e0       	ldi	r22, 0x02	; 2
     748:	8c e2       	ldi	r24, 0x2C	; 44
     74a:	0e 94 df 04 	call	0x9be	; 0x9be <mcp2515_bit_modify>
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61
	}
}
     758:	2b 96       	adiw	r28, 0x0b	; 11
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	ff 91       	pop	r31
     76a:	ef 91       	pop	r30
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	7f 91       	pop	r23
     776:	6f 91       	pop	r22
     778:	5f 91       	pop	r21
     77a:	4f 91       	pop	r20
     77c:	3f 91       	pop	r19
     77e:	2f 91       	pop	r18
     780:	1f 91       	pop	r17
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	1f 90       	pop	r1
     78a:	18 95       	reti

0000078c <send_multifunc_board>:
#include "joystic_driver.h"
#include "adc_driver.h"
#include "can_driver.h"


void send_multifunc_board( void ){
     78c:	7f 92       	push	r7
     78e:	8f 92       	push	r8
     790:	9f 92       	push	r9
     792:	af 92       	push	r10
     794:	bf 92       	push	r11
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	2b 97       	sbiw	r28, 0x0b	; 11
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t y_axis = joystick_analog_position_percentage(read_adc(0),0);
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	0e 94 61 00 	call	0xc2	; 0xc2 <read_adc>
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	0e 94 e7 00 	call	0x1ce	; 0x1ce <joystick_analog_position_percentage>
     7c2:	78 2e       	mov	r7, r24
	uint8_t x_axis = joystick_analog_position_percentage(read_adc(1),1);
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	0e 94 61 00 	call	0xc2	; 0xc2 <read_adc>
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <joystick_analog_position_percentage>
     7d0:	88 2e       	mov	r8, r24
	uint8_t right_slider = read_adc(2);
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	0e 94 61 00 	call	0xc2	; 0xc2 <read_adc>
     7d8:	98 2e       	mov	r9, r24
	uint8_t left_slider = read_adc(3);
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	0e 94 61 00 	call	0xc2	; 0xc2 <read_adc>
     7e0:	a8 2e       	mov	r10, r24
	uint8_t joy_button = (PINB & (1<<PB2));
     7e2:	86 b3       	in	r24, 0x16	; 22
     7e4:	84 70       	andi	r24, 0x04	; 4
     7e6:	b8 2e       	mov	r11, r24
	uint8_t right_button = (PINB & (1<<PB1));
     7e8:	86 b3       	in	r24, 0x16	; 22
     7ea:	82 70       	andi	r24, 0x02	; 2
     7ec:	c8 2e       	mov	r12, r24
	uint8_t left_button = (PINB & (1<<PB0));
     7ee:	86 b3       	in	r24, 0x16	; 22
     7f0:	81 70       	andi	r24, 0x01	; 1
     7f2:	d8 2e       	mov	r13, r24
	
	message multifunc_board_msg;
	multifunc_board_msg.id = 6; //Find good real value
     7f4:	86 e0       	ldi	r24, 0x06	; 6
     7f6:	e8 2e       	mov	r14, r24
     7f8:	89 83       	std	Y+1, r24	; 0x01
     7fa:	1a 82       	std	Y+2, r1	; 0x02
	multifunc_board_msg.data[3] = left_slider;
	multifunc_board_msg.data[4] = joy_button;
	multifunc_board_msg.data[5] = right_button;
	multifunc_board_msg.data[6] = left_button;
	
	can_send(multifunc_board_msg);
     7fc:	f1 2c       	mov	r15, r1
     7fe:	07 e0       	ldi	r16, 0x07	; 7
     800:	17 2d       	mov	r17, r7
     802:	28 2d       	mov	r18, r8
     804:	39 2d       	mov	r19, r9
     806:	4a 2d       	mov	r20, r10
     808:	5b 2d       	mov	r21, r11
     80a:	6c 2d       	mov	r22, r12
     80c:	7d 2d       	mov	r23, r13
     80e:	8b 85       	ldd	r24, Y+11	; 0x0b
     810:	0e 94 2a 02 	call	0x454	; 0x454 <can_send>
	printf("\r\n####### NEW MESSAGE SENDT #######\r\n");
     814:	8a ee       	ldi	r24, 0xEA	; 234
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	0e 94 d4 06 	call	0xda8	; 0xda8 <puts>
	printf("Data Y:\t%i\r\n",multifunc_board_msg.data[0]);
     81c:	1f 92       	push	r1
     81e:	7f 92       	push	r7
     820:	8f e0       	ldi	r24, 0x0F	; 15
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	9f 93       	push	r25
     826:	8f 93       	push	r24
     828:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
	printf("Data X:\t%i\r\n",multifunc_board_msg.data[1]);
     82c:	1f 92       	push	r1
     82e:	8f 92       	push	r8
     830:	8c e1       	ldi	r24, 0x1C	; 28
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	9f 93       	push	r25
     836:	8f 93       	push	r24
     838:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
	printf("Data Right slider:\t%i\r\n",multifunc_board_msg.data[2]);
     83c:	1f 92       	push	r1
     83e:	9f 92       	push	r9
     840:	89 e2       	ldi	r24, 0x29	; 41
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
	printf("Data Left slider:\t%i\r\n",multifunc_board_msg.data[3]);
     84c:	1f 92       	push	r1
     84e:	af 92       	push	r10
     850:	81 e4       	ldi	r24, 0x41	; 65
     852:	92 e0       	ldi	r25, 0x02	; 2
     854:	9f 93       	push	r25
     856:	8f 93       	push	r24
     858:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
	printf("Joy button:\t%i\r\n",multifunc_board_msg.data[4]);
     85c:	1f 92       	push	r1
     85e:	bf 92       	push	r11
     860:	88 e5       	ldi	r24, 0x58	; 88
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	9f 93       	push	r25
     866:	8f 93       	push	r24
     868:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
	printf("Right button:\t%i\r\n",multifunc_board_msg.data[5]);
     86c:	1f 92       	push	r1
     86e:	cf 92       	push	r12
     870:	89 e6       	ldi	r24, 0x69	; 105
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	9f 93       	push	r25
     876:	8f 93       	push	r24
     878:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
	printf("Left button:\t%i\r\n",multifunc_board_msg.data[6]);
     87c:	1f 92       	push	r1
     87e:	df 92       	push	r13
     880:	8c e7       	ldi	r24, 0x7C	; 124
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	9f 93       	push	r25
     886:	8f 93       	push	r24
     888:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
	printf("Data lengt:\t%d\n\r",multifunc_board_msg.length);
     88c:	1f 92       	push	r1
     88e:	87 e0       	ldi	r24, 0x07	; 7
     890:	8f 93       	push	r24
     892:	8e e8       	ldi	r24, 0x8E	; 142
     894:	92 e0       	ldi	r25, 0x02	; 2
     896:	9f 93       	push	r25
     898:	8f 93       	push	r24
     89a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
	printf("ID:\t%d\r\n",multifunc_board_msg.id);
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	1f 92       	push	r1
     8aa:	86 e0       	ldi	r24, 0x06	; 6
     8ac:	8f 93       	push	r24
     8ae:	82 ec       	ldi	r24, 0xC2	; 194
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	9f 93       	push	r25
     8b4:	8f 93       	push	r24
     8b6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <printf>
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	2b 96       	adiw	r28, 0x0b	; 11
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	bf 90       	pop	r11
     8e0:	af 90       	pop	r10
     8e2:	9f 90       	pop	r9
     8e4:	8f 90       	pop	r8
     8e6:	7f 90       	pop	r7
     8e8:	08 95       	ret

000008ea <main>:
volatile uint8_t* oled_command = (uint8_t*)0x1000;
volatile uint8_t* oled_data = (uint8_t*)0x1200;

int main(void)
{
	xmem_init ();
     8ea:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <xmem_init>
	button_init();
     8ee:	0e 94 ba 01 	call	0x374	; 0x374 <button_init>
	adc_timer();
     8f2:	0e 94 57 00 	call	0xae	; 0xae <adc_timer>
	UART_Init();
     8f6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <UART_Init>
	oled_init();
     8fa:	0e 94 7d 05 	call	0xafa	; 0xafa <oled_init>
	oled_clear();
     8fe:	0e 94 46 05 	call	0xa8c	; 0xa8c <oled_clear>
     902:	2f ef       	ldi	r18, 0xFF	; 255
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	9e e0       	ldi	r25, 0x0E	; 14
     908:	21 50       	subi	r18, 0x01	; 1
     90a:	80 40       	sbci	r24, 0x00	; 0
     90c:	90 40       	sbci	r25, 0x00	; 0
     90e:	e1 f7       	brne	.-8      	; 0x908 <main+0x1e>
     910:	00 c0       	rjmp	.+0      	; 0x912 <main+0x28>
     912:	00 00       	nop
	_delay_ms(1000);
	uint8_t row = 0;
	uint8_t column = 0;
	oled_pos(row,column);
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	0e 94 64 05 	call	0xac8	; 0xac8 <oled_pos>
	can_init();
     91c:	0e 94 c4 01 	call	0x388	; 0x388 <can_init>
	
	printf("\r\n################ Init complete ################\r\n");
     920:	8f e9       	ldi	r24, 0x9F	; 159
     922:	92 e0       	ldi	r25, 0x02	; 2
     924:	0e 94 d4 06 	call	0xda8	; 0xda8 <puts>
     928:	2f ef       	ldi	r18, 0xFF	; 255
     92a:	8f e7       	ldi	r24, 0x7F	; 127
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	21 50       	subi	r18, 0x01	; 1
     930:	80 40       	sbci	r24, 0x00	; 0
     932:	90 40       	sbci	r25, 0x00	; 0
     934:	e1 f7       	brne	.-8      	; 0x92e <main+0x44>
     936:	00 c0       	rjmp	.+0      	; 0x938 <main+0x4e>
     938:	00 c0       	rjmp	.+0      	; 0x93a <main+0x50>

	while(1){
		_delay_ms(100);
		send_multifunc_board();
     93a:	0e 94 c6 03 	call	0x78c	; 0x78c <send_multifunc_board>
     93e:	f4 cf       	rjmp	.-24     	; 0x928 <main+0x3e>

00000940 <mcp2515_read>:
	ss_select();
	spi_transmit(MCP_READ_STATUS);
	data_out = spi_recieve(); // POSSIBLY PROBLEMS 
	ss_deselect();
	return data_out;
}
     940:	cf 93       	push	r28
     942:	c8 2f       	mov	r28, r24
     944:	0e 94 c0 05 	call	0xb80	; 0xb80 <ss_select>
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
     94e:	8c 2f       	mov	r24, r28
     950:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
     954:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_recieve>
     958:	c8 2f       	mov	r28, r24
     95a:	0e 94 c4 05 	call	0xb88	; 0xb88 <ss_deselect>
     95e:	8c 2f       	mov	r24, r28
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <mcp2515_write>:
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	d8 2f       	mov	r29, r24
     96a:	c6 2f       	mov	r28, r22
     96c:	0e 94 c0 05 	call	0xb80	; 0xb80 <ss_select>
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
     976:	8d 2f       	mov	r24, r29
     978:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
     97c:	8c 2f       	mov	r24, r28
     97e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
     982:	0e 94 c4 05 	call	0xb88	; 0xb88 <ss_deselect>
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <mcp2515_rts>:
     98c:	cf 93       	push	r28
     98e:	c8 2f       	mov	r28, r24
     990:	0e 94 c0 05 	call	0xb80	; 0xb80 <ss_select>
     994:	c1 11       	cpse	r28, r1
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <mcp2515_rts+0x14>
     998:	81 e8       	ldi	r24, 0x81	; 129
     99a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
     99e:	0b c0       	rjmp	.+22     	; 0x9b6 <mcp2515_rts+0x2a>
     9a0:	c1 30       	cpi	r28, 0x01	; 1
     9a2:	21 f4       	brne	.+8      	; 0x9ac <mcp2515_rts+0x20>
     9a4:	82 e8       	ldi	r24, 0x82	; 130
     9a6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
     9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <mcp2515_rts+0x2a>
     9ac:	c2 30       	cpi	r28, 0x02	; 2
     9ae:	19 f4       	brne	.+6      	; 0x9b6 <mcp2515_rts+0x2a>
     9b0:	84 e8       	ldi	r24, 0x84	; 132
     9b2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
     9b6:	0e 94 c4 05 	call	0xb88	; 0xb88 <ss_deselect>
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <mcp2515_bit_modify>:

void mcp2515_bit_modify ( uint8_t address, uint8_t mask, uint8_t data ){
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	18 2f       	mov	r17, r24
     9c6:	d6 2f       	mov	r29, r22
     9c8:	c4 2f       	mov	r28, r20
	ss_select();
     9ca:	0e 94 c0 05 	call	0xb80	; 0xb80 <ss_select>
	spi_transmit(MCP_BITMOD);
     9ce:	85 e0       	ldi	r24, 0x05	; 5
     9d0:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
	spi_transmit(address);
     9d4:	81 2f       	mov	r24, r17
     9d6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
	spi_transmit(mask);
     9da:	8d 2f       	mov	r24, r29
     9dc:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
	spi_transmit(data);
     9e0:	8c 2f       	mov	r24, r28
     9e2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
	ss_deselect();
     9e6:	0e 94 c4 05 	call	0xb88	; 0xb88 <ss_deselect>
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	08 95       	ret

000009f2 <mcp2515_reset>:

void mcp2515_reset ( void ) {
	ss_select();
     9f2:	0e 94 c0 05 	call	0xb80	; 0xb80 <ss_select>
	spi_transmit(MCP_RESET);
     9f6:	80 ec       	ldi	r24, 0xC0	; 192
     9f8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
	ss_deselect();
     9fc:	0e 94 c4 05 	call	0xb88	; 0xb88 <ss_deselect>
     a00:	08 95       	ret

00000a02 <mcp_read_pointer>:
}

void mcp_read_pointer ( uint8_t address, uint8_t* value ) {
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	18 2f       	mov	r17, r24
     a0a:	eb 01       	movw	r28, r22
	uint8_t data_out;
	ss_select();
     a0c:	0e 94 c0 05 	call	0xb80	; 0xb80 <ss_select>
	spi_transmit(MCP_READ);
     a10:	83 e0       	ldi	r24, 0x03	; 3
     a12:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
	spi_transmit(address);
     a16:	81 2f       	mov	r24, r17
     a18:	0e 94 cd 05 	call	0xb9a	; 0xb9a <spi_transmit>
	data_out = spi_recieve();
     a1c:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_recieve>
     a20:	18 2f       	mov	r17, r24
	ss_deselect();
     a22:	0e 94 c4 05 	call	0xb88	; 0xb88 <ss_deselect>
	
	*value = data_out;
     a26:	18 83       	st	Y, r17
}
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	08 95       	ret

00000a30 <mcp2515_init>:


uint8_t mcp2515_init ( void ) {
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	1f 92       	push	r1
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
	uint8_t value = 1;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	89 83       	std	Y+1, r24	; 0x01
	spi_master_init () ; // Initialize SPI
     a3e:	0e 94 c8 05 	call	0xb90	; 0xb90 <spi_master_init>
	mcp2515_reset () ; // Send reset - command
     a42:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <mcp2515_reset>
	// Self - test
	mcp_read_pointer ( MCP_CANSTAT, &value );
     a46:	be 01       	movw	r22, r28
     a48:	6f 5f       	subi	r22, 0xFF	; 255
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	8e e0       	ldi	r24, 0x0E	; 14
     a4e:	0e 94 01 05 	call	0xa02	; 0xa02 <mcp_read_pointer>

	if (( value & MODE_MASK ) != MODE_CONFIG ) {
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	80 7e       	andi	r24, 0xE0	; 224
     a56:	80 38       	cpi	r24, 0x80	; 128
     a58:	31 f0       	breq	.+12     	; 0xa66 <mcp2515_init+0x36>
		printf (" MCP2515 is NOT in configuration mode after reset !\r\n");
     a5a:	82 ed       	ldi	r24, 0xD2	; 210
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	0e 94 d4 06 	call	0xda8	; 0xda8 <puts>
		return 1;
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	09 c0       	rjmp	.+18     	; 0xa78 <mcp2515_init+0x48>
	}
	else if ( ( value & MODE_MASK ) == MODE_CONFIG )
     a66:	80 38       	cpi	r24, 0x80	; 128
     a68:	31 f4       	brne	.+12     	; 0xa76 <mcp2515_init+0x46>
	{
				printf (" MCP2515 is IN configuration mode after reset !\r\n");
     a6a:	87 e0       	ldi	r24, 0x07	; 7
     a6c:	93 e0       	ldi	r25, 0x03	; 3
     a6e:	0e 94 d4 06 	call	0xda8	; 0xda8 <puts>
	}
	// More initialization
	return 0;
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <mcp2515_init+0x48>
     a76:	80 e0       	ldi	r24, 0x00	; 0
}
     a78:	0f 90       	pop	r0
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <oled_write_command>:
	oled_clear();
	oled_pos(row,column);
}

void oled_fill( void ){
	oled_write_command(0xA5);
     a80:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_address>
     a84:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_address+0x1>
     a88:	80 83       	st	Z, r24
     a8a:	08 95       	ret

00000a8c <oled_clear>:
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	c0 e0       	ldi	r28, 0x00	; 0
     a92:	d0 e0       	ldi	r29, 0x00	; 0
     a94:	13 c0       	rjmp	.+38     	; 0xabc <oled_clear+0x30>
     a96:	8c 2f       	mov	r24, r28
     a98:	80 55       	subi	r24, 0x50	; 80
     a9a:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	08 c0       	rjmp	.+16     	; 0xab4 <oled_clear+0x28>
     aa4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data_address>
     aa8:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data_address+0x1>
     aac:	ec 0f       	add	r30, r28
     aae:	fd 1f       	adc	r31, r29
     ab0:	10 82       	st	Z, r1
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	80 38       	cpi	r24, 0x80	; 128
     ab6:	91 05       	cpc	r25, r1
     ab8:	ac f3       	brlt	.-22     	; 0xaa4 <oled_clear+0x18>
     aba:	21 96       	adiw	r28, 0x01	; 1
     abc:	c8 30       	cpi	r28, 0x08	; 8
     abe:	d1 05       	cpc	r29, r1
     ac0:	54 f3       	brlt	.-44     	; 0xa96 <oled_clear+0xa>
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <oled_pos>:
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	d8 2f       	mov	r29, r24
     ace:	c6 2f       	mov	r28, r22
     ad0:	82 e2       	ldi	r24, 0x22	; 34
     ad2:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
     ad6:	8d 2f       	mov	r24, r29
     ad8:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
     ae2:	81 e2       	ldi	r24, 0x21	; 33
     ae4:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
     ae8:	8c 2f       	mov	r24, r28
     aea:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
     aee:	8f e7       	ldi	r24, 0x7F	; 127
     af0:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <oled_init>:
}

void oled_init( void ){ // Yoinked from OLED data sheet
	oled_write_command(0xae); // display off
     afa:	8e ea       	ldi	r24, 0xAE	; 174
     afc:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0xa1); //segment remap
     b00:	81 ea       	ldi	r24, 0xA1	; 161
     b02:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0xda); //common pads hardware: alternative
     b06:	8a ed       	ldi	r24, 0xDA	; 218
     b08:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0x12);
     b0c:	82 e1       	ldi	r24, 0x12	; 18
     b0e:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0xc8); //common output scan direction:com63~com0
     b12:	88 ec       	ldi	r24, 0xC8	; 200
     b14:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0xa8); //multiplex ration mode:63
     b18:	88 ea       	ldi	r24, 0xA8	; 168
     b1a:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0x3f);
     b1e:	8f e3       	ldi	r24, 0x3F	; 63
     b20:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0xd5); //display divide ratio/osc. freq. mode
     b24:	85 ed       	ldi	r24, 0xD5	; 213
     b26:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0x80);
     b2a:	80 e8       	ldi	r24, 0x80	; 128
     b2c:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0x81); //contrast control
     b30:	81 e8       	ldi	r24, 0x81	; 129
     b32:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0x50);
     b36:	80 e5       	ldi	r24, 0x50	; 80
     b38:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0xd9); //set pre-charge period
     b3c:	89 ed       	ldi	r24, 0xD9	; 217
     b3e:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0x21);
     b42:	81 e2       	ldi	r24, 0x21	; 33
     b44:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0x20); //Set Memory Addressing Mode
     b48:	80 e2       	ldi	r24, 0x20	; 32
     b4a:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0x02);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0xdb); //VCOM deselect level mode
     b54:	8b ed       	ldi	r24, 0xDB	; 219
     b56:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0x30);
     b5a:	80 e3       	ldi	r24, 0x30	; 48
     b5c:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0xad); //master configuration
     b60:	8d ea       	ldi	r24, 0xAD	; 173
     b62:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0x00);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0xa4); //out follows RAM content
     b6c:	84 ea       	ldi	r24, 0xA4	; 164
     b6e:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0xa6); //set normal display
     b72:	86 ea       	ldi	r24, 0xA6	; 166
     b74:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
	oled_write_command(0xaf); // display on
     b78:	8f ea       	ldi	r24, 0xAF	; 175
     b7a:	0e 94 40 05 	call	0xa80	; 0xa80 <oled_write_command>
     b7e:	08 95       	ret

00000b80 <ss_select>:
#define F_CPU 4915200 // Clock Speed

#include <util/delay.h>

void ss_select ( void ){
	PORTB &= (~(1 << PB4));
     b80:	88 b3       	in	r24, 0x18	; 24
     b82:	8f 7e       	andi	r24, 0xEF	; 239
     b84:	88 bb       	out	0x18, r24	; 24
     b86:	08 95       	ret

00000b88 <ss_deselect>:
}

void ss_deselect ( void ){
	PORTB |= (1 << PB4);
     b88:	88 b3       	in	r24, 0x18	; 24
     b8a:	80 61       	ori	r24, 0x10	; 16
     b8c:	88 bb       	out	0x18, r24	; 24
     b8e:	08 95       	ret

00000b90 <spi_master_init>:
}

void spi_master_init(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<PB4)|(1<<PB5)|(1<<PB7);
     b90:	80 eb       	ldi	r24, 0xB0	; 176
     b92:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); // Tror vi er i SPI mode 0, fordi CPOL og CPHA = 0
     b94:	81 e5       	ldi	r24, 0x51	; 81
     b96:	8d b9       	out	0x0d, r24	; 13
     b98:	08 95       	ret

00000b9a <spi_transmit>:

}
void spi_transmit (char cData)
{
	/* Start transmission */
	SPDR = cData;
     b9a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     b9c:	77 9b       	sbis	0x0e, 7	; 14
     b9e:	fe cf       	rjmp	.-4      	; 0xb9c <spi_transmit+0x2>
	;
}
     ba0:	08 95       	ret

00000ba2 <spi_recieve>:

char spi_recieve( void )
{
	SPDR = 0xFF;
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	8f b9       	out	0x0f, r24	; 15
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
     ba6:	77 9b       	sbis	0x0e, 7	; 14
     ba8:	fe cf       	rjmp	.-4      	; 0xba6 <spi_recieve+0x4>
	;
	return SPDR;
     baa:	8f b1       	in	r24, 0x0f	; 15
}
     bac:	08 95       	ret

00000bae <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     bae:	5d 9b       	sbis	0x0b, 5	; 11
     bb0:	fe cf       	rjmp	.-4      	; 0xbae <UART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     bb2:	8c b9       	out	0x0c, r24	; 12
     bb4:	08 95       	ret

00000bb6 <UART_Receive>:


unsigned char UART_Receive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     bb6:	5f 9b       	sbis	0x0b, 7	; 11
     bb8:	fe cf       	rjmp	.-4      	; 0xbb6 <UART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
     bba:	8c b1       	in	r24, 0x0c	; 12
}
     bbc:	08 95       	ret

00000bbe <UART_printf_link>:

void UART_printf_link()
{
	fdevopen((int (*)(char, FILE*))UART_Transmit, (int (*)(FILE*))UART_Receive);
     bbe:	6b ed       	ldi	r22, 0xDB	; 219
     bc0:	75 e0       	ldi	r23, 0x05	; 5
     bc2:	87 ed       	ldi	r24, 0xD7	; 215
     bc4:	95 e0       	ldi	r25, 0x05	; 5
     bc6:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <fdevopen>
     bca:	08 95       	ret

00000bcc <UART_Init>:

void UART_Init( void )
{
	/* Set baud rate */
	int ubrr = 31;
	UBRR0H = (unsigned char)(ubrr>>8);
     bcc:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)ubrr;
     bce:	8f e1       	ldi	r24, 0x1F	; 31
     bd0:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     bd2:	88 e1       	ldi	r24, 0x18	; 24
     bd4:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     bd6:	8e e8       	ldi	r24, 0x8E	; 142
     bd8:	80 bd       	out	0x20, r24	; 32
	//return 0;
	/* Link printtf to */
	UART_printf_link();
     bda:	0e 94 df 05 	call	0xbbe	; 0xbbe <UART_printf_link>
     bde:	08 95       	ret

00000be0 <xmem_init>:
#include "xmem.h"
#include <avr/io.h>


void xmem_init (){
	MCUCR |= (1 << SRE ); // enable XMEM
     be0:	85 b7       	in	r24, 0x35	; 53
     be2:	80 68       	ori	r24, 0x80	; 128
     be4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2 ); // mask unused bits
     be6:	80 b7       	in	r24, 0x30	; 48
     be8:	80 62       	ori	r24, 0x20	; 32
     bea:	80 bf       	out	0x30, r24	; 48
     bec:	08 95       	ret

00000bee <xmem_write>:
}

void xmem_write ( uint16_t base_address, int addr, uint8_t data){
	volatile char * ext_mem = ( char *) base_address ;
	ext_mem [ addr ]= data ;
     bee:	86 0f       	add	r24, r22
     bf0:	97 1f       	adc	r25, r23
     bf2:	fc 01       	movw	r30, r24
     bf4:	40 83       	st	Z, r20
     bf6:	08 95       	ret

00000bf8 <xmem_read>:
}

uint8_t xmem_read ( uint16_t base_address, uint16_t addr ){
	volatile char * ext_mem = ( char *) base_address ; //ADC address
	uint8_t ret_val = ext_mem [ addr ];
     bf8:	86 0f       	add	r24, r22
     bfa:	97 1f       	adc	r25, r23
     bfc:	fc 01       	movw	r30, r24
     bfe:	80 81       	ld	r24, Z
	return ret_val ;
     c00:	08 95       	ret

00000c02 <__mulsi3>:
     c02:	db 01       	movw	r26, r22
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	0e 94 30 06 	call	0xc60	; 0xc60 <__muluhisi3>
     c0c:	bf 91       	pop	r27
     c0e:	af 91       	pop	r26
     c10:	a2 9f       	mul	r26, r18
     c12:	80 0d       	add	r24, r0
     c14:	91 1d       	adc	r25, r1
     c16:	a3 9f       	mul	r26, r19
     c18:	90 0d       	add	r25, r0
     c1a:	b2 9f       	mul	r27, r18
     c1c:	90 0d       	add	r25, r0
     c1e:	11 24       	eor	r1, r1
     c20:	08 95       	ret

00000c22 <__divmodsi4>:
     c22:	05 2e       	mov	r0, r21
     c24:	97 fb       	bst	r25, 7
     c26:	1e f4       	brtc	.+6      	; 0xc2e <__divmodsi4+0xc>
     c28:	00 94       	com	r0
     c2a:	0e 94 28 06 	call	0xc50	; 0xc50 <__negsi2>
     c2e:	57 fd       	sbrc	r21, 7
     c30:	07 d0       	rcall	.+14     	; 0xc40 <__divmodsi4_neg2>
     c32:	0e 94 3b 06 	call	0xc76	; 0xc76 <__udivmodsi4>
     c36:	07 fc       	sbrc	r0, 7
     c38:	03 d0       	rcall	.+6      	; 0xc40 <__divmodsi4_neg2>
     c3a:	4e f4       	brtc	.+18     	; 0xc4e <__divmodsi4_exit>
     c3c:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__negsi2>

00000c40 <__divmodsi4_neg2>:
     c40:	50 95       	com	r21
     c42:	40 95       	com	r20
     c44:	30 95       	com	r19
     c46:	21 95       	neg	r18
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	4f 4f       	sbci	r20, 0xFF	; 255
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255

00000c4e <__divmodsi4_exit>:
     c4e:	08 95       	ret

00000c50 <__negsi2>:
     c50:	90 95       	com	r25
     c52:	80 95       	com	r24
     c54:	70 95       	com	r23
     c56:	61 95       	neg	r22
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	8f 4f       	sbci	r24, 0xFF	; 255
     c5c:	9f 4f       	sbci	r25, 0xFF	; 255
     c5e:	08 95       	ret

00000c60 <__muluhisi3>:
     c60:	0e 94 5d 06 	call	0xcba	; 0xcba <__umulhisi3>
     c64:	a5 9f       	mul	r26, r21
     c66:	90 0d       	add	r25, r0
     c68:	b4 9f       	mul	r27, r20
     c6a:	90 0d       	add	r25, r0
     c6c:	a4 9f       	mul	r26, r20
     c6e:	80 0d       	add	r24, r0
     c70:	91 1d       	adc	r25, r1
     c72:	11 24       	eor	r1, r1
     c74:	08 95       	ret

00000c76 <__udivmodsi4>:
     c76:	a1 e2       	ldi	r26, 0x21	; 33
     c78:	1a 2e       	mov	r1, r26
     c7a:	aa 1b       	sub	r26, r26
     c7c:	bb 1b       	sub	r27, r27
     c7e:	fd 01       	movw	r30, r26
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <__udivmodsi4_ep>

00000c82 <__udivmodsi4_loop>:
     c82:	aa 1f       	adc	r26, r26
     c84:	bb 1f       	adc	r27, r27
     c86:	ee 1f       	adc	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	a2 17       	cp	r26, r18
     c8c:	b3 07       	cpc	r27, r19
     c8e:	e4 07       	cpc	r30, r20
     c90:	f5 07       	cpc	r31, r21
     c92:	20 f0       	brcs	.+8      	; 0xc9c <__udivmodsi4_ep>
     c94:	a2 1b       	sub	r26, r18
     c96:	b3 0b       	sbc	r27, r19
     c98:	e4 0b       	sbc	r30, r20
     c9a:	f5 0b       	sbc	r31, r21

00000c9c <__udivmodsi4_ep>:
     c9c:	66 1f       	adc	r22, r22
     c9e:	77 1f       	adc	r23, r23
     ca0:	88 1f       	adc	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	1a 94       	dec	r1
     ca6:	69 f7       	brne	.-38     	; 0xc82 <__udivmodsi4_loop>
     ca8:	60 95       	com	r22
     caa:	70 95       	com	r23
     cac:	80 95       	com	r24
     cae:	90 95       	com	r25
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	bd 01       	movw	r22, r26
     cb6:	cf 01       	movw	r24, r30
     cb8:	08 95       	ret

00000cba <__umulhisi3>:
     cba:	a2 9f       	mul	r26, r18
     cbc:	b0 01       	movw	r22, r0
     cbe:	b3 9f       	mul	r27, r19
     cc0:	c0 01       	movw	r24, r0
     cc2:	a3 9f       	mul	r26, r19
     cc4:	70 0d       	add	r23, r0
     cc6:	81 1d       	adc	r24, r1
     cc8:	11 24       	eor	r1, r1
     cca:	91 1d       	adc	r25, r1
     ccc:	b2 9f       	mul	r27, r18
     cce:	70 0d       	add	r23, r0
     cd0:	81 1d       	adc	r24, r1
     cd2:	11 24       	eor	r1, r1
     cd4:	91 1d       	adc	r25, r1
     cd6:	08 95       	ret

00000cd8 <fdevopen>:
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	31 f4       	brne	.+12     	; 0xcf0 <fdevopen+0x18>
     ce4:	61 15       	cp	r22, r1
     ce6:	71 05       	cpc	r23, r1
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <fdevopen+0x18>
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	3a c0       	rjmp	.+116    	; 0xd64 <fdevopen+0x8c>
     cf0:	8b 01       	movw	r16, r22
     cf2:	ec 01       	movw	r28, r24
     cf4:	6e e0       	ldi	r22, 0x0E	; 14
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <calloc>
     d00:	fc 01       	movw	r30, r24
     d02:	89 2b       	or	r24, r25
     d04:	91 f3       	breq	.-28     	; 0xcea <fdevopen+0x12>
     d06:	80 e8       	ldi	r24, 0x80	; 128
     d08:	83 83       	std	Z+3, r24	; 0x03
     d0a:	01 15       	cp	r16, r1
     d0c:	11 05       	cpc	r17, r1
     d0e:	71 f0       	breq	.+28     	; 0xd2c <fdevopen+0x54>
     d10:	13 87       	std	Z+11, r17	; 0x0b
     d12:	02 87       	std	Z+10, r16	; 0x0a
     d14:	81 e8       	ldi	r24, 0x81	; 129
     d16:	83 83       	std	Z+3, r24	; 0x03
     d18:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <__iob>
     d1c:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <__iob+0x1>
     d20:	89 2b       	or	r24, r25
     d22:	21 f4       	brne	.+8      	; 0xd2c <fdevopen+0x54>
     d24:	f0 93 50 03 	sts	0x0350, r31	; 0x800350 <__iob+0x1>
     d28:	e0 93 4f 03 	sts	0x034F, r30	; 0x80034f <__iob>
     d2c:	20 97       	sbiw	r28, 0x00	; 0
     d2e:	c9 f0       	breq	.+50     	; 0xd62 <fdevopen+0x8a>
     d30:	d1 87       	std	Z+9, r29	; 0x09
     d32:	c0 87       	std	Z+8, r28	; 0x08
     d34:	83 81       	ldd	r24, Z+3	; 0x03
     d36:	82 60       	ori	r24, 0x02	; 2
     d38:	83 83       	std	Z+3, r24	; 0x03
     d3a:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <__iob+0x2>
     d3e:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <__iob+0x3>
     d42:	89 2b       	or	r24, r25
     d44:	71 f4       	brne	.+28     	; 0xd62 <fdevopen+0x8a>
     d46:	f0 93 52 03 	sts	0x0352, r31	; 0x800352 <__iob+0x3>
     d4a:	e0 93 51 03 	sts	0x0351, r30	; 0x800351 <__iob+0x2>
     d4e:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <__iob+0x4>
     d52:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <__iob+0x5>
     d56:	89 2b       	or	r24, r25
     d58:	21 f4       	brne	.+8      	; 0xd62 <fdevopen+0x8a>
     d5a:	f0 93 54 03 	sts	0x0354, r31	; 0x800354 <__iob+0x5>
     d5e:	e0 93 53 03 	sts	0x0353, r30	; 0x800353 <__iob+0x4>
     d62:	cf 01       	movw	r24, r30
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	08 95       	ret

00000d6e <printf>:
     d6e:	a0 e0       	ldi	r26, 0x00	; 0
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	ed eb       	ldi	r30, 0xBD	; 189
     d74:	f6 e0       	ldi	r31, 0x06	; 6
     d76:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__prologue_saves__+0x20>
     d7a:	ae 01       	movw	r20, r28
     d7c:	4b 5f       	subi	r20, 0xFB	; 251
     d7e:	5f 4f       	sbci	r21, 0xFF	; 255
     d80:	fa 01       	movw	r30, r20
     d82:	61 91       	ld	r22, Z+
     d84:	71 91       	ld	r23, Z+
     d86:	af 01       	movw	r20, r30
     d88:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <__iob+0x2>
     d8c:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <__iob+0x3>
     d90:	0e 94 04 07 	call	0xe08	; 0xe08 <vfprintf>
     d94:	e2 e0       	ldi	r30, 0x02	; 2
     d96:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__epilogue_restores__+0x20>

00000d9a <putchar>:
     d9a:	60 91 51 03 	lds	r22, 0x0351	; 0x800351 <__iob+0x2>
     d9e:	70 91 52 03 	lds	r23, 0x0352	; 0x800352 <__iob+0x3>
     da2:	0e 94 3f 0a 	call	0x147e	; 0x147e <fputc>
     da6:	08 95       	ret

00000da8 <puts>:
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	e0 91 51 03 	lds	r30, 0x0351	; 0x800351 <__iob+0x2>
     db4:	f0 91 52 03 	lds	r31, 0x0352	; 0x800352 <__iob+0x3>
     db8:	23 81       	ldd	r18, Z+3	; 0x03
     dba:	21 ff       	sbrs	r18, 1
     dbc:	1b c0       	rjmp	.+54     	; 0xdf4 <puts+0x4c>
     dbe:	8c 01       	movw	r16, r24
     dc0:	d0 e0       	ldi	r29, 0x00	; 0
     dc2:	c0 e0       	ldi	r28, 0x00	; 0
     dc4:	f8 01       	movw	r30, r16
     dc6:	81 91       	ld	r24, Z+
     dc8:	8f 01       	movw	r16, r30
     dca:	60 91 51 03 	lds	r22, 0x0351	; 0x800351 <__iob+0x2>
     dce:	70 91 52 03 	lds	r23, 0x0352	; 0x800352 <__iob+0x3>
     dd2:	db 01       	movw	r26, r22
     dd4:	18 96       	adiw	r26, 0x08	; 8
     dd6:	ed 91       	ld	r30, X+
     dd8:	fc 91       	ld	r31, X
     dda:	19 97       	sbiw	r26, 0x09	; 9
     ddc:	88 23       	and	r24, r24
     dde:	31 f0       	breq	.+12     	; 0xdec <puts+0x44>
     de0:	09 95       	icall
     de2:	89 2b       	or	r24, r25
     de4:	79 f3       	breq	.-34     	; 0xdc4 <puts+0x1c>
     de6:	df ef       	ldi	r29, 0xFF	; 255
     de8:	cf ef       	ldi	r28, 0xFF	; 255
     dea:	ec cf       	rjmp	.-40     	; 0xdc4 <puts+0x1c>
     dec:	8a e0       	ldi	r24, 0x0A	; 10
     dee:	09 95       	icall
     df0:	89 2b       	or	r24, r25
     df2:	19 f0       	breq	.+6      	; 0xdfa <puts+0x52>
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	9f ef       	ldi	r25, 0xFF	; 255
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <puts+0x56>
     dfa:	8d 2f       	mov	r24, r29
     dfc:	9c 2f       	mov	r25, r28
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	08 95       	ret

00000e08 <vfprintf>:
     e08:	ab e0       	ldi	r26, 0x0B	; 11
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ea e0       	ldi	r30, 0x0A	; 10
     e0e:	f7 e0       	ldi	r31, 0x07	; 7
     e10:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__prologue_saves__>
     e14:	6c 01       	movw	r12, r24
     e16:	7b 01       	movw	r14, r22
     e18:	8a 01       	movw	r16, r20
     e1a:	fc 01       	movw	r30, r24
     e1c:	17 82       	std	Z+7, r1	; 0x07
     e1e:	16 82       	std	Z+6, r1	; 0x06
     e20:	83 81       	ldd	r24, Z+3	; 0x03
     e22:	81 ff       	sbrs	r24, 1
     e24:	cc c1       	rjmp	.+920    	; 0x11be <vfprintf+0x3b6>
     e26:	ce 01       	movw	r24, r28
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	3c 01       	movw	r6, r24
     e2c:	f6 01       	movw	r30, r12
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	f7 01       	movw	r30, r14
     e32:	93 fd       	sbrc	r25, 3
     e34:	85 91       	lpm	r24, Z+
     e36:	93 ff       	sbrs	r25, 3
     e38:	81 91       	ld	r24, Z+
     e3a:	7f 01       	movw	r14, r30
     e3c:	88 23       	and	r24, r24
     e3e:	09 f4       	brne	.+2      	; 0xe42 <vfprintf+0x3a>
     e40:	ba c1       	rjmp	.+884    	; 0x11b6 <vfprintf+0x3ae>
     e42:	85 32       	cpi	r24, 0x25	; 37
     e44:	39 f4       	brne	.+14     	; 0xe54 <vfprintf+0x4c>
     e46:	93 fd       	sbrc	r25, 3
     e48:	85 91       	lpm	r24, Z+
     e4a:	93 ff       	sbrs	r25, 3
     e4c:	81 91       	ld	r24, Z+
     e4e:	7f 01       	movw	r14, r30
     e50:	85 32       	cpi	r24, 0x25	; 37
     e52:	29 f4       	brne	.+10     	; 0xe5e <vfprintf+0x56>
     e54:	b6 01       	movw	r22, r12
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 3f 0a 	call	0x147e	; 0x147e <fputc>
     e5c:	e7 cf       	rjmp	.-50     	; 0xe2c <vfprintf+0x24>
     e5e:	91 2c       	mov	r9, r1
     e60:	21 2c       	mov	r2, r1
     e62:	31 2c       	mov	r3, r1
     e64:	ff e1       	ldi	r31, 0x1F	; 31
     e66:	f3 15       	cp	r31, r3
     e68:	d8 f0       	brcs	.+54     	; 0xea0 <vfprintf+0x98>
     e6a:	8b 32       	cpi	r24, 0x2B	; 43
     e6c:	79 f0       	breq	.+30     	; 0xe8c <vfprintf+0x84>
     e6e:	38 f4       	brcc	.+14     	; 0xe7e <vfprintf+0x76>
     e70:	80 32       	cpi	r24, 0x20	; 32
     e72:	79 f0       	breq	.+30     	; 0xe92 <vfprintf+0x8a>
     e74:	83 32       	cpi	r24, 0x23	; 35
     e76:	a1 f4       	brne	.+40     	; 0xea0 <vfprintf+0x98>
     e78:	23 2d       	mov	r18, r3
     e7a:	20 61       	ori	r18, 0x10	; 16
     e7c:	1d c0       	rjmp	.+58     	; 0xeb8 <vfprintf+0xb0>
     e7e:	8d 32       	cpi	r24, 0x2D	; 45
     e80:	61 f0       	breq	.+24     	; 0xe9a <vfprintf+0x92>
     e82:	80 33       	cpi	r24, 0x30	; 48
     e84:	69 f4       	brne	.+26     	; 0xea0 <vfprintf+0x98>
     e86:	23 2d       	mov	r18, r3
     e88:	21 60       	ori	r18, 0x01	; 1
     e8a:	16 c0       	rjmp	.+44     	; 0xeb8 <vfprintf+0xb0>
     e8c:	83 2d       	mov	r24, r3
     e8e:	82 60       	ori	r24, 0x02	; 2
     e90:	38 2e       	mov	r3, r24
     e92:	e3 2d       	mov	r30, r3
     e94:	e4 60       	ori	r30, 0x04	; 4
     e96:	3e 2e       	mov	r3, r30
     e98:	2a c0       	rjmp	.+84     	; 0xeee <vfprintf+0xe6>
     e9a:	f3 2d       	mov	r31, r3
     e9c:	f8 60       	ori	r31, 0x08	; 8
     e9e:	1d c0       	rjmp	.+58     	; 0xeda <vfprintf+0xd2>
     ea0:	37 fc       	sbrc	r3, 7
     ea2:	2d c0       	rjmp	.+90     	; 0xefe <vfprintf+0xf6>
     ea4:	20 ed       	ldi	r18, 0xD0	; 208
     ea6:	28 0f       	add	r18, r24
     ea8:	2a 30       	cpi	r18, 0x0A	; 10
     eaa:	40 f0       	brcs	.+16     	; 0xebc <vfprintf+0xb4>
     eac:	8e 32       	cpi	r24, 0x2E	; 46
     eae:	b9 f4       	brne	.+46     	; 0xede <vfprintf+0xd6>
     eb0:	36 fc       	sbrc	r3, 6
     eb2:	81 c1       	rjmp	.+770    	; 0x11b6 <vfprintf+0x3ae>
     eb4:	23 2d       	mov	r18, r3
     eb6:	20 64       	ori	r18, 0x40	; 64
     eb8:	32 2e       	mov	r3, r18
     eba:	19 c0       	rjmp	.+50     	; 0xeee <vfprintf+0xe6>
     ebc:	36 fe       	sbrs	r3, 6
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <vfprintf+0xc4>
     ec0:	8a e0       	ldi	r24, 0x0A	; 10
     ec2:	98 9e       	mul	r9, r24
     ec4:	20 0d       	add	r18, r0
     ec6:	11 24       	eor	r1, r1
     ec8:	92 2e       	mov	r9, r18
     eca:	11 c0       	rjmp	.+34     	; 0xeee <vfprintf+0xe6>
     ecc:	ea e0       	ldi	r30, 0x0A	; 10
     ece:	2e 9e       	mul	r2, r30
     ed0:	20 0d       	add	r18, r0
     ed2:	11 24       	eor	r1, r1
     ed4:	22 2e       	mov	r2, r18
     ed6:	f3 2d       	mov	r31, r3
     ed8:	f0 62       	ori	r31, 0x20	; 32
     eda:	3f 2e       	mov	r3, r31
     edc:	08 c0       	rjmp	.+16     	; 0xeee <vfprintf+0xe6>
     ede:	8c 36       	cpi	r24, 0x6C	; 108
     ee0:	21 f4       	brne	.+8      	; 0xeea <vfprintf+0xe2>
     ee2:	83 2d       	mov	r24, r3
     ee4:	80 68       	ori	r24, 0x80	; 128
     ee6:	38 2e       	mov	r3, r24
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <vfprintf+0xe6>
     eea:	88 36       	cpi	r24, 0x68	; 104
     eec:	41 f4       	brne	.+16     	; 0xefe <vfprintf+0xf6>
     eee:	f7 01       	movw	r30, r14
     ef0:	93 fd       	sbrc	r25, 3
     ef2:	85 91       	lpm	r24, Z+
     ef4:	93 ff       	sbrs	r25, 3
     ef6:	81 91       	ld	r24, Z+
     ef8:	7f 01       	movw	r14, r30
     efa:	81 11       	cpse	r24, r1
     efc:	b3 cf       	rjmp	.-154    	; 0xe64 <vfprintf+0x5c>
     efe:	98 2f       	mov	r25, r24
     f00:	9f 7d       	andi	r25, 0xDF	; 223
     f02:	95 54       	subi	r25, 0x45	; 69
     f04:	93 30       	cpi	r25, 0x03	; 3
     f06:	28 f4       	brcc	.+10     	; 0xf12 <vfprintf+0x10a>
     f08:	0c 5f       	subi	r16, 0xFC	; 252
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	9f e3       	ldi	r25, 0x3F	; 63
     f0e:	99 83       	std	Y+1, r25	; 0x01
     f10:	0d c0       	rjmp	.+26     	; 0xf2c <vfprintf+0x124>
     f12:	83 36       	cpi	r24, 0x63	; 99
     f14:	31 f0       	breq	.+12     	; 0xf22 <vfprintf+0x11a>
     f16:	83 37       	cpi	r24, 0x73	; 115
     f18:	71 f0       	breq	.+28     	; 0xf36 <vfprintf+0x12e>
     f1a:	83 35       	cpi	r24, 0x53	; 83
     f1c:	09 f0       	breq	.+2      	; 0xf20 <vfprintf+0x118>
     f1e:	59 c0       	rjmp	.+178    	; 0xfd2 <vfprintf+0x1ca>
     f20:	21 c0       	rjmp	.+66     	; 0xf64 <vfprintf+0x15c>
     f22:	f8 01       	movw	r30, r16
     f24:	80 81       	ld	r24, Z
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	0e 5f       	subi	r16, 0xFE	; 254
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	88 24       	eor	r8, r8
     f2e:	83 94       	inc	r8
     f30:	91 2c       	mov	r9, r1
     f32:	53 01       	movw	r10, r6
     f34:	13 c0       	rjmp	.+38     	; 0xf5c <vfprintf+0x154>
     f36:	28 01       	movw	r4, r16
     f38:	f2 e0       	ldi	r31, 0x02	; 2
     f3a:	4f 0e       	add	r4, r31
     f3c:	51 1c       	adc	r5, r1
     f3e:	f8 01       	movw	r30, r16
     f40:	a0 80       	ld	r10, Z
     f42:	b1 80       	ldd	r11, Z+1	; 0x01
     f44:	36 fe       	sbrs	r3, 6
     f46:	03 c0       	rjmp	.+6      	; 0xf4e <vfprintf+0x146>
     f48:	69 2d       	mov	r22, r9
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <vfprintf+0x14a>
     f4e:	6f ef       	ldi	r22, 0xFF	; 255
     f50:	7f ef       	ldi	r23, 0xFF	; 255
     f52:	c5 01       	movw	r24, r10
     f54:	0e 94 34 0a 	call	0x1468	; 0x1468 <strnlen>
     f58:	4c 01       	movw	r8, r24
     f5a:	82 01       	movw	r16, r4
     f5c:	f3 2d       	mov	r31, r3
     f5e:	ff 77       	andi	r31, 0x7F	; 127
     f60:	3f 2e       	mov	r3, r31
     f62:	16 c0       	rjmp	.+44     	; 0xf90 <vfprintf+0x188>
     f64:	28 01       	movw	r4, r16
     f66:	22 e0       	ldi	r18, 0x02	; 2
     f68:	42 0e       	add	r4, r18
     f6a:	51 1c       	adc	r5, r1
     f6c:	f8 01       	movw	r30, r16
     f6e:	a0 80       	ld	r10, Z
     f70:	b1 80       	ldd	r11, Z+1	; 0x01
     f72:	36 fe       	sbrs	r3, 6
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <vfprintf+0x174>
     f76:	69 2d       	mov	r22, r9
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <vfprintf+0x178>
     f7c:	6f ef       	ldi	r22, 0xFF	; 255
     f7e:	7f ef       	ldi	r23, 0xFF	; 255
     f80:	c5 01       	movw	r24, r10
     f82:	0e 94 22 0a 	call	0x1444	; 0x1444 <strnlen_P>
     f86:	4c 01       	movw	r8, r24
     f88:	f3 2d       	mov	r31, r3
     f8a:	f0 68       	ori	r31, 0x80	; 128
     f8c:	3f 2e       	mov	r3, r31
     f8e:	82 01       	movw	r16, r4
     f90:	33 fc       	sbrc	r3, 3
     f92:	1b c0       	rjmp	.+54     	; 0xfca <vfprintf+0x1c2>
     f94:	82 2d       	mov	r24, r2
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	88 16       	cp	r8, r24
     f9a:	99 06       	cpc	r9, r25
     f9c:	b0 f4       	brcc	.+44     	; 0xfca <vfprintf+0x1c2>
     f9e:	b6 01       	movw	r22, r12
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 3f 0a 	call	0x147e	; 0x147e <fputc>
     fa8:	2a 94       	dec	r2
     faa:	f4 cf       	rjmp	.-24     	; 0xf94 <vfprintf+0x18c>
     fac:	f5 01       	movw	r30, r10
     fae:	37 fc       	sbrc	r3, 7
     fb0:	85 91       	lpm	r24, Z+
     fb2:	37 fe       	sbrs	r3, 7
     fb4:	81 91       	ld	r24, Z+
     fb6:	5f 01       	movw	r10, r30
     fb8:	b6 01       	movw	r22, r12
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 3f 0a 	call	0x147e	; 0x147e <fputc>
     fc0:	21 10       	cpse	r2, r1
     fc2:	2a 94       	dec	r2
     fc4:	21 e0       	ldi	r18, 0x01	; 1
     fc6:	82 1a       	sub	r8, r18
     fc8:	91 08       	sbc	r9, r1
     fca:	81 14       	cp	r8, r1
     fcc:	91 04       	cpc	r9, r1
     fce:	71 f7       	brne	.-36     	; 0xfac <vfprintf+0x1a4>
     fd0:	e8 c0       	rjmp	.+464    	; 0x11a2 <vfprintf+0x39a>
     fd2:	84 36       	cpi	r24, 0x64	; 100
     fd4:	11 f0       	breq	.+4      	; 0xfda <vfprintf+0x1d2>
     fd6:	89 36       	cpi	r24, 0x69	; 105
     fd8:	41 f5       	brne	.+80     	; 0x102a <vfprintf+0x222>
     fda:	f8 01       	movw	r30, r16
     fdc:	37 fe       	sbrs	r3, 7
     fde:	07 c0       	rjmp	.+14     	; 0xfee <vfprintf+0x1e6>
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	0c 5f       	subi	r16, 0xFC	; 252
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	08 c0       	rjmp	.+16     	; 0xffe <vfprintf+0x1f6>
     fee:	60 81       	ld	r22, Z
     ff0:	71 81       	ldd	r23, Z+1	; 0x01
     ff2:	07 2e       	mov	r0, r23
     ff4:	00 0c       	add	r0, r0
     ff6:	88 0b       	sbc	r24, r24
     ff8:	99 0b       	sbc	r25, r25
     ffa:	0e 5f       	subi	r16, 0xFE	; 254
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	f3 2d       	mov	r31, r3
    1000:	ff 76       	andi	r31, 0x6F	; 111
    1002:	3f 2e       	mov	r3, r31
    1004:	97 ff       	sbrs	r25, 7
    1006:	09 c0       	rjmp	.+18     	; 0x101a <vfprintf+0x212>
    1008:	90 95       	com	r25
    100a:	80 95       	com	r24
    100c:	70 95       	com	r23
    100e:	61 95       	neg	r22
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	8f 4f       	sbci	r24, 0xFF	; 255
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	f0 68       	ori	r31, 0x80	; 128
    1018:	3f 2e       	mov	r3, r31
    101a:	2a e0       	ldi	r18, 0x0A	; 10
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	a3 01       	movw	r20, r6
    1020:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__ultoa_invert>
    1024:	88 2e       	mov	r8, r24
    1026:	86 18       	sub	r8, r6
    1028:	45 c0       	rjmp	.+138    	; 0x10b4 <vfprintf+0x2ac>
    102a:	85 37       	cpi	r24, 0x75	; 117
    102c:	31 f4       	brne	.+12     	; 0x103a <vfprintf+0x232>
    102e:	23 2d       	mov	r18, r3
    1030:	2f 7e       	andi	r18, 0xEF	; 239
    1032:	b2 2e       	mov	r11, r18
    1034:	2a e0       	ldi	r18, 0x0A	; 10
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	25 c0       	rjmp	.+74     	; 0x1084 <vfprintf+0x27c>
    103a:	93 2d       	mov	r25, r3
    103c:	99 7f       	andi	r25, 0xF9	; 249
    103e:	b9 2e       	mov	r11, r25
    1040:	8f 36       	cpi	r24, 0x6F	; 111
    1042:	c1 f0       	breq	.+48     	; 0x1074 <vfprintf+0x26c>
    1044:	18 f4       	brcc	.+6      	; 0x104c <vfprintf+0x244>
    1046:	88 35       	cpi	r24, 0x58	; 88
    1048:	79 f0       	breq	.+30     	; 0x1068 <vfprintf+0x260>
    104a:	b5 c0       	rjmp	.+362    	; 0x11b6 <vfprintf+0x3ae>
    104c:	80 37       	cpi	r24, 0x70	; 112
    104e:	19 f0       	breq	.+6      	; 0x1056 <vfprintf+0x24e>
    1050:	88 37       	cpi	r24, 0x78	; 120
    1052:	21 f0       	breq	.+8      	; 0x105c <vfprintf+0x254>
    1054:	b0 c0       	rjmp	.+352    	; 0x11b6 <vfprintf+0x3ae>
    1056:	e9 2f       	mov	r30, r25
    1058:	e0 61       	ori	r30, 0x10	; 16
    105a:	be 2e       	mov	r11, r30
    105c:	b4 fe       	sbrs	r11, 4
    105e:	0d c0       	rjmp	.+26     	; 0x107a <vfprintf+0x272>
    1060:	fb 2d       	mov	r31, r11
    1062:	f4 60       	ori	r31, 0x04	; 4
    1064:	bf 2e       	mov	r11, r31
    1066:	09 c0       	rjmp	.+18     	; 0x107a <vfprintf+0x272>
    1068:	34 fe       	sbrs	r3, 4
    106a:	0a c0       	rjmp	.+20     	; 0x1080 <vfprintf+0x278>
    106c:	29 2f       	mov	r18, r25
    106e:	26 60       	ori	r18, 0x06	; 6
    1070:	b2 2e       	mov	r11, r18
    1072:	06 c0       	rjmp	.+12     	; 0x1080 <vfprintf+0x278>
    1074:	28 e0       	ldi	r18, 0x08	; 8
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <vfprintf+0x27c>
    107a:	20 e1       	ldi	r18, 0x10	; 16
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <vfprintf+0x27c>
    1080:	20 e1       	ldi	r18, 0x10	; 16
    1082:	32 e0       	ldi	r19, 0x02	; 2
    1084:	f8 01       	movw	r30, r16
    1086:	b7 fe       	sbrs	r11, 7
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <vfprintf+0x290>
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	0c 5f       	subi	r16, 0xFC	; 252
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <vfprintf+0x29c>
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 5f       	subi	r16, 0xFE	; 254
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	a3 01       	movw	r20, r6
    10a6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__ultoa_invert>
    10aa:	88 2e       	mov	r8, r24
    10ac:	86 18       	sub	r8, r6
    10ae:	fb 2d       	mov	r31, r11
    10b0:	ff 77       	andi	r31, 0x7F	; 127
    10b2:	3f 2e       	mov	r3, r31
    10b4:	36 fe       	sbrs	r3, 6
    10b6:	0d c0       	rjmp	.+26     	; 0x10d2 <vfprintf+0x2ca>
    10b8:	23 2d       	mov	r18, r3
    10ba:	2e 7f       	andi	r18, 0xFE	; 254
    10bc:	a2 2e       	mov	r10, r18
    10be:	89 14       	cp	r8, r9
    10c0:	58 f4       	brcc	.+22     	; 0x10d8 <vfprintf+0x2d0>
    10c2:	34 fe       	sbrs	r3, 4
    10c4:	0b c0       	rjmp	.+22     	; 0x10dc <vfprintf+0x2d4>
    10c6:	32 fc       	sbrc	r3, 2
    10c8:	09 c0       	rjmp	.+18     	; 0x10dc <vfprintf+0x2d4>
    10ca:	83 2d       	mov	r24, r3
    10cc:	8e 7e       	andi	r24, 0xEE	; 238
    10ce:	a8 2e       	mov	r10, r24
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <vfprintf+0x2d4>
    10d2:	b8 2c       	mov	r11, r8
    10d4:	a3 2c       	mov	r10, r3
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <vfprintf+0x2d6>
    10d8:	b8 2c       	mov	r11, r8
    10da:	01 c0       	rjmp	.+2      	; 0x10de <vfprintf+0x2d6>
    10dc:	b9 2c       	mov	r11, r9
    10de:	a4 fe       	sbrs	r10, 4
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <vfprintf+0x2f8>
    10e2:	fe 01       	movw	r30, r28
    10e4:	e8 0d       	add	r30, r8
    10e6:	f1 1d       	adc	r31, r1
    10e8:	80 81       	ld	r24, Z
    10ea:	80 33       	cpi	r24, 0x30	; 48
    10ec:	21 f4       	brne	.+8      	; 0x10f6 <vfprintf+0x2ee>
    10ee:	9a 2d       	mov	r25, r10
    10f0:	99 7e       	andi	r25, 0xE9	; 233
    10f2:	a9 2e       	mov	r10, r25
    10f4:	09 c0       	rjmp	.+18     	; 0x1108 <vfprintf+0x300>
    10f6:	a2 fe       	sbrs	r10, 2
    10f8:	06 c0       	rjmp	.+12     	; 0x1106 <vfprintf+0x2fe>
    10fa:	b3 94       	inc	r11
    10fc:	b3 94       	inc	r11
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <vfprintf+0x300>
    1100:	8a 2d       	mov	r24, r10
    1102:	86 78       	andi	r24, 0x86	; 134
    1104:	09 f0       	breq	.+2      	; 0x1108 <vfprintf+0x300>
    1106:	b3 94       	inc	r11
    1108:	a3 fc       	sbrc	r10, 3
    110a:	11 c0       	rjmp	.+34     	; 0x112e <vfprintf+0x326>
    110c:	a0 fe       	sbrs	r10, 0
    110e:	06 c0       	rjmp	.+12     	; 0x111c <vfprintf+0x314>
    1110:	b2 14       	cp	r11, r2
    1112:	88 f4       	brcc	.+34     	; 0x1136 <vfprintf+0x32e>
    1114:	28 0c       	add	r2, r8
    1116:	92 2c       	mov	r9, r2
    1118:	9b 18       	sub	r9, r11
    111a:	0e c0       	rjmp	.+28     	; 0x1138 <vfprintf+0x330>
    111c:	b2 14       	cp	r11, r2
    111e:	60 f4       	brcc	.+24     	; 0x1138 <vfprintf+0x330>
    1120:	b6 01       	movw	r22, r12
    1122:	80 e2       	ldi	r24, 0x20	; 32
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 3f 0a 	call	0x147e	; 0x147e <fputc>
    112a:	b3 94       	inc	r11
    112c:	f7 cf       	rjmp	.-18     	; 0x111c <vfprintf+0x314>
    112e:	b2 14       	cp	r11, r2
    1130:	18 f4       	brcc	.+6      	; 0x1138 <vfprintf+0x330>
    1132:	2b 18       	sub	r2, r11
    1134:	02 c0       	rjmp	.+4      	; 0x113a <vfprintf+0x332>
    1136:	98 2c       	mov	r9, r8
    1138:	21 2c       	mov	r2, r1
    113a:	a4 fe       	sbrs	r10, 4
    113c:	10 c0       	rjmp	.+32     	; 0x115e <vfprintf+0x356>
    113e:	b6 01       	movw	r22, r12
    1140:	80 e3       	ldi	r24, 0x30	; 48
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 3f 0a 	call	0x147e	; 0x147e <fputc>
    1148:	a2 fe       	sbrs	r10, 2
    114a:	17 c0       	rjmp	.+46     	; 0x117a <vfprintf+0x372>
    114c:	a1 fc       	sbrc	r10, 1
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <vfprintf+0x34e>
    1150:	88 e7       	ldi	r24, 0x78	; 120
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 c0       	rjmp	.+4      	; 0x115a <vfprintf+0x352>
    1156:	88 e5       	ldi	r24, 0x58	; 88
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	b6 01       	movw	r22, r12
    115c:	0c c0       	rjmp	.+24     	; 0x1176 <vfprintf+0x36e>
    115e:	8a 2d       	mov	r24, r10
    1160:	86 78       	andi	r24, 0x86	; 134
    1162:	59 f0       	breq	.+22     	; 0x117a <vfprintf+0x372>
    1164:	a1 fe       	sbrs	r10, 1
    1166:	02 c0       	rjmp	.+4      	; 0x116c <vfprintf+0x364>
    1168:	8b e2       	ldi	r24, 0x2B	; 43
    116a:	01 c0       	rjmp	.+2      	; 0x116e <vfprintf+0x366>
    116c:	80 e2       	ldi	r24, 0x20	; 32
    116e:	a7 fc       	sbrc	r10, 7
    1170:	8d e2       	ldi	r24, 0x2D	; 45
    1172:	b6 01       	movw	r22, r12
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 3f 0a 	call	0x147e	; 0x147e <fputc>
    117a:	89 14       	cp	r8, r9
    117c:	38 f4       	brcc	.+14     	; 0x118c <vfprintf+0x384>
    117e:	b6 01       	movw	r22, r12
    1180:	80 e3       	ldi	r24, 0x30	; 48
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 3f 0a 	call	0x147e	; 0x147e <fputc>
    1188:	9a 94       	dec	r9
    118a:	f7 cf       	rjmp	.-18     	; 0x117a <vfprintf+0x372>
    118c:	8a 94       	dec	r8
    118e:	f3 01       	movw	r30, r6
    1190:	e8 0d       	add	r30, r8
    1192:	f1 1d       	adc	r31, r1
    1194:	80 81       	ld	r24, Z
    1196:	b6 01       	movw	r22, r12
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 3f 0a 	call	0x147e	; 0x147e <fputc>
    119e:	81 10       	cpse	r8, r1
    11a0:	f5 cf       	rjmp	.-22     	; 0x118c <vfprintf+0x384>
    11a2:	22 20       	and	r2, r2
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <vfprintf+0x3a0>
    11a6:	42 ce       	rjmp	.-892    	; 0xe2c <vfprintf+0x24>
    11a8:	b6 01       	movw	r22, r12
    11aa:	80 e2       	ldi	r24, 0x20	; 32
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 3f 0a 	call	0x147e	; 0x147e <fputc>
    11b2:	2a 94       	dec	r2
    11b4:	f6 cf       	rjmp	.-20     	; 0x11a2 <vfprintf+0x39a>
    11b6:	f6 01       	movw	r30, r12
    11b8:	86 81       	ldd	r24, Z+6	; 0x06
    11ba:	97 81       	ldd	r25, Z+7	; 0x07
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <vfprintf+0x3ba>
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	9f ef       	ldi	r25, 0xFF	; 255
    11c2:	2b 96       	adiw	r28, 0x0b	; 11
    11c4:	e2 e1       	ldi	r30, 0x12	; 18
    11c6:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__epilogue_restores__>

000011ca <calloc>:
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	86 9f       	mul	r24, r22
    11d4:	80 01       	movw	r16, r0
    11d6:	87 9f       	mul	r24, r23
    11d8:	10 0d       	add	r17, r0
    11da:	96 9f       	mul	r25, r22
    11dc:	10 0d       	add	r17, r0
    11de:	11 24       	eor	r1, r1
    11e0:	c8 01       	movw	r24, r16
    11e2:	0e 94 01 09 	call	0x1202	; 0x1202 <malloc>
    11e6:	ec 01       	movw	r28, r24
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	29 f0       	breq	.+10     	; 0x11f6 <calloc+0x2c>
    11ec:	a8 01       	movw	r20, r16
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	0e 94 2d 0a 	call	0x145a	; 0x145a <memset>
    11f6:	ce 01       	movw	r24, r28
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	08 95       	ret

00001202 <malloc>:
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	82 30       	cpi	r24, 0x02	; 2
    120c:	91 05       	cpc	r25, r1
    120e:	10 f4       	brcc	.+4      	; 0x1214 <malloc+0x12>
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <__flp>
    1218:	f0 91 58 03 	lds	r31, 0x0358	; 0x800358 <__flp+0x1>
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	a0 e0       	ldi	r26, 0x00	; 0
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	30 97       	sbiw	r30, 0x00	; 0
    1226:	19 f1       	breq	.+70     	; 0x126e <malloc+0x6c>
    1228:	40 81       	ld	r20, Z
    122a:	51 81       	ldd	r21, Z+1	; 0x01
    122c:	02 81       	ldd	r16, Z+2	; 0x02
    122e:	13 81       	ldd	r17, Z+3	; 0x03
    1230:	48 17       	cp	r20, r24
    1232:	59 07       	cpc	r21, r25
    1234:	c8 f0       	brcs	.+50     	; 0x1268 <malloc+0x66>
    1236:	84 17       	cp	r24, r20
    1238:	95 07       	cpc	r25, r21
    123a:	69 f4       	brne	.+26     	; 0x1256 <malloc+0x54>
    123c:	10 97       	sbiw	r26, 0x00	; 0
    123e:	31 f0       	breq	.+12     	; 0x124c <malloc+0x4a>
    1240:	12 96       	adiw	r26, 0x02	; 2
    1242:	0c 93       	st	X, r16
    1244:	12 97       	sbiw	r26, 0x02	; 2
    1246:	13 96       	adiw	r26, 0x03	; 3
    1248:	1c 93       	st	X, r17
    124a:	27 c0       	rjmp	.+78     	; 0x129a <malloc+0x98>
    124c:	00 93 57 03 	sts	0x0357, r16	; 0x800357 <__flp>
    1250:	10 93 58 03 	sts	0x0358, r17	; 0x800358 <__flp+0x1>
    1254:	22 c0       	rjmp	.+68     	; 0x129a <malloc+0x98>
    1256:	21 15       	cp	r18, r1
    1258:	31 05       	cpc	r19, r1
    125a:	19 f0       	breq	.+6      	; 0x1262 <malloc+0x60>
    125c:	42 17       	cp	r20, r18
    125e:	53 07       	cpc	r21, r19
    1260:	18 f4       	brcc	.+6      	; 0x1268 <malloc+0x66>
    1262:	9a 01       	movw	r18, r20
    1264:	bd 01       	movw	r22, r26
    1266:	ef 01       	movw	r28, r30
    1268:	df 01       	movw	r26, r30
    126a:	f8 01       	movw	r30, r16
    126c:	db cf       	rjmp	.-74     	; 0x1224 <malloc+0x22>
    126e:	21 15       	cp	r18, r1
    1270:	31 05       	cpc	r19, r1
    1272:	f9 f0       	breq	.+62     	; 0x12b2 <malloc+0xb0>
    1274:	28 1b       	sub	r18, r24
    1276:	39 0b       	sbc	r19, r25
    1278:	24 30       	cpi	r18, 0x04	; 4
    127a:	31 05       	cpc	r19, r1
    127c:	80 f4       	brcc	.+32     	; 0x129e <malloc+0x9c>
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	61 15       	cp	r22, r1
    1284:	71 05       	cpc	r23, r1
    1286:	21 f0       	breq	.+8      	; 0x1290 <malloc+0x8e>
    1288:	fb 01       	movw	r30, r22
    128a:	93 83       	std	Z+3, r25	; 0x03
    128c:	82 83       	std	Z+2, r24	; 0x02
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <malloc+0x96>
    1290:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <__flp+0x1>
    1294:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <__flp>
    1298:	fe 01       	movw	r30, r28
    129a:	32 96       	adiw	r30, 0x02	; 2
    129c:	44 c0       	rjmp	.+136    	; 0x1326 <malloc+0x124>
    129e:	fe 01       	movw	r30, r28
    12a0:	e2 0f       	add	r30, r18
    12a2:	f3 1f       	adc	r31, r19
    12a4:	81 93       	st	Z+, r24
    12a6:	91 93       	st	Z+, r25
    12a8:	22 50       	subi	r18, 0x02	; 2
    12aa:	31 09       	sbc	r19, r1
    12ac:	39 83       	std	Y+1, r19	; 0x01
    12ae:	28 83       	st	Y, r18
    12b0:	3a c0       	rjmp	.+116    	; 0x1326 <malloc+0x124>
    12b2:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <__brkval>
    12b6:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <__brkval+0x1>
    12ba:	23 2b       	or	r18, r19
    12bc:	41 f4       	brne	.+16     	; 0x12ce <malloc+0xcc>
    12be:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    12c2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    12c6:	30 93 56 03 	sts	0x0356, r19	; 0x800356 <__brkval+0x1>
    12ca:	20 93 55 03 	sts	0x0355, r18	; 0x800355 <__brkval>
    12ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    12d2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    12d6:	21 15       	cp	r18, r1
    12d8:	31 05       	cpc	r19, r1
    12da:	41 f4       	brne	.+16     	; 0x12ec <malloc+0xea>
    12dc:	2d b7       	in	r18, 0x3d	; 61
    12de:	3e b7       	in	r19, 0x3e	; 62
    12e0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    12e4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    12e8:	24 1b       	sub	r18, r20
    12ea:	35 0b       	sbc	r19, r21
    12ec:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <__brkval>
    12f0:	f0 91 56 03 	lds	r31, 0x0356	; 0x800356 <__brkval+0x1>
    12f4:	e2 17       	cp	r30, r18
    12f6:	f3 07       	cpc	r31, r19
    12f8:	a0 f4       	brcc	.+40     	; 0x1322 <malloc+0x120>
    12fa:	2e 1b       	sub	r18, r30
    12fc:	3f 0b       	sbc	r19, r31
    12fe:	28 17       	cp	r18, r24
    1300:	39 07       	cpc	r19, r25
    1302:	78 f0       	brcs	.+30     	; 0x1322 <malloc+0x120>
    1304:	ac 01       	movw	r20, r24
    1306:	4e 5f       	subi	r20, 0xFE	; 254
    1308:	5f 4f       	sbci	r21, 0xFF	; 255
    130a:	24 17       	cp	r18, r20
    130c:	35 07       	cpc	r19, r21
    130e:	48 f0       	brcs	.+18     	; 0x1322 <malloc+0x120>
    1310:	4e 0f       	add	r20, r30
    1312:	5f 1f       	adc	r21, r31
    1314:	50 93 56 03 	sts	0x0356, r21	; 0x800356 <__brkval+0x1>
    1318:	40 93 55 03 	sts	0x0355, r20	; 0x800355 <__brkval>
    131c:	81 93       	st	Z+, r24
    131e:	91 93       	st	Z+, r25
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <malloc+0x124>
    1322:	e0 e0       	ldi	r30, 0x00	; 0
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	cf 01       	movw	r24, r30
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	08 95       	ret

00001332 <free>:
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	09 f4       	brne	.+2      	; 0x133c <free+0xa>
    133a:	81 c0       	rjmp	.+258    	; 0x143e <free+0x10c>
    133c:	fc 01       	movw	r30, r24
    133e:	32 97       	sbiw	r30, 0x02	; 2
    1340:	13 82       	std	Z+3, r1	; 0x03
    1342:	12 82       	std	Z+2, r1	; 0x02
    1344:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <__flp>
    1348:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <__flp+0x1>
    134c:	10 97       	sbiw	r26, 0x00	; 0
    134e:	81 f4       	brne	.+32     	; 0x1370 <free+0x3e>
    1350:	20 81       	ld	r18, Z
    1352:	31 81       	ldd	r19, Z+1	; 0x01
    1354:	82 0f       	add	r24, r18
    1356:	93 1f       	adc	r25, r19
    1358:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <__brkval>
    135c:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <__brkval+0x1>
    1360:	28 17       	cp	r18, r24
    1362:	39 07       	cpc	r19, r25
    1364:	51 f5       	brne	.+84     	; 0x13ba <free+0x88>
    1366:	f0 93 56 03 	sts	0x0356, r31	; 0x800356 <__brkval+0x1>
    136a:	e0 93 55 03 	sts	0x0355, r30	; 0x800355 <__brkval>
    136e:	67 c0       	rjmp	.+206    	; 0x143e <free+0x10c>
    1370:	ed 01       	movw	r28, r26
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	ce 17       	cp	r28, r30
    1378:	df 07       	cpc	r29, r31
    137a:	40 f4       	brcc	.+16     	; 0x138c <free+0x5a>
    137c:	4a 81       	ldd	r20, Y+2	; 0x02
    137e:	5b 81       	ldd	r21, Y+3	; 0x03
    1380:	9e 01       	movw	r18, r28
    1382:	41 15       	cp	r20, r1
    1384:	51 05       	cpc	r21, r1
    1386:	f1 f0       	breq	.+60     	; 0x13c4 <free+0x92>
    1388:	ea 01       	movw	r28, r20
    138a:	f5 cf       	rjmp	.-22     	; 0x1376 <free+0x44>
    138c:	d3 83       	std	Z+3, r29	; 0x03
    138e:	c2 83       	std	Z+2, r28	; 0x02
    1390:	40 81       	ld	r20, Z
    1392:	51 81       	ldd	r21, Z+1	; 0x01
    1394:	84 0f       	add	r24, r20
    1396:	95 1f       	adc	r25, r21
    1398:	c8 17       	cp	r28, r24
    139a:	d9 07       	cpc	r29, r25
    139c:	59 f4       	brne	.+22     	; 0x13b4 <free+0x82>
    139e:	88 81       	ld	r24, Y
    13a0:	99 81       	ldd	r25, Y+1	; 0x01
    13a2:	84 0f       	add	r24, r20
    13a4:	95 1f       	adc	r25, r21
    13a6:	02 96       	adiw	r24, 0x02	; 2
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	80 83       	st	Z, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	9b 81       	ldd	r25, Y+3	; 0x03
    13b0:	93 83       	std	Z+3, r25	; 0x03
    13b2:	82 83       	std	Z+2, r24	; 0x02
    13b4:	21 15       	cp	r18, r1
    13b6:	31 05       	cpc	r19, r1
    13b8:	29 f4       	brne	.+10     	; 0x13c4 <free+0x92>
    13ba:	f0 93 58 03 	sts	0x0358, r31	; 0x800358 <__flp+0x1>
    13be:	e0 93 57 03 	sts	0x0357, r30	; 0x800357 <__flp>
    13c2:	3d c0       	rjmp	.+122    	; 0x143e <free+0x10c>
    13c4:	e9 01       	movw	r28, r18
    13c6:	fb 83       	std	Y+3, r31	; 0x03
    13c8:	ea 83       	std	Y+2, r30	; 0x02
    13ca:	49 91       	ld	r20, Y+
    13cc:	59 91       	ld	r21, Y+
    13ce:	c4 0f       	add	r28, r20
    13d0:	d5 1f       	adc	r29, r21
    13d2:	ec 17       	cp	r30, r28
    13d4:	fd 07       	cpc	r31, r29
    13d6:	61 f4       	brne	.+24     	; 0x13f0 <free+0xbe>
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	84 0f       	add	r24, r20
    13de:	95 1f       	adc	r25, r21
    13e0:	02 96       	adiw	r24, 0x02	; 2
    13e2:	e9 01       	movw	r28, r18
    13e4:	99 83       	std	Y+1, r25	; 0x01
    13e6:	88 83       	st	Y, r24
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	9b 83       	std	Y+3, r25	; 0x03
    13ee:	8a 83       	std	Y+2, r24	; 0x02
    13f0:	e0 e0       	ldi	r30, 0x00	; 0
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	12 96       	adiw	r26, 0x02	; 2
    13f6:	8d 91       	ld	r24, X+
    13f8:	9c 91       	ld	r25, X
    13fa:	13 97       	sbiw	r26, 0x03	; 3
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	19 f0       	breq	.+6      	; 0x1406 <free+0xd4>
    1400:	fd 01       	movw	r30, r26
    1402:	dc 01       	movw	r26, r24
    1404:	f7 cf       	rjmp	.-18     	; 0x13f4 <free+0xc2>
    1406:	8d 91       	ld	r24, X+
    1408:	9c 91       	ld	r25, X
    140a:	11 97       	sbiw	r26, 0x01	; 1
    140c:	9d 01       	movw	r18, r26
    140e:	2e 5f       	subi	r18, 0xFE	; 254
    1410:	3f 4f       	sbci	r19, 0xFF	; 255
    1412:	82 0f       	add	r24, r18
    1414:	93 1f       	adc	r25, r19
    1416:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <__brkval>
    141a:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <__brkval+0x1>
    141e:	28 17       	cp	r18, r24
    1420:	39 07       	cpc	r19, r25
    1422:	69 f4       	brne	.+26     	; 0x143e <free+0x10c>
    1424:	30 97       	sbiw	r30, 0x00	; 0
    1426:	29 f4       	brne	.+10     	; 0x1432 <free+0x100>
    1428:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__flp+0x1>
    142c:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <__flp>
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <free+0x104>
    1432:	13 82       	std	Z+3, r1	; 0x03
    1434:	12 82       	std	Z+2, r1	; 0x02
    1436:	b0 93 56 03 	sts	0x0356, r27	; 0x800356 <__brkval+0x1>
    143a:	a0 93 55 03 	sts	0x0355, r26	; 0x800355 <__brkval>
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	08 95       	ret

00001444 <strnlen_P>:
    1444:	fc 01       	movw	r30, r24
    1446:	05 90       	lpm	r0, Z+
    1448:	61 50       	subi	r22, 0x01	; 1
    144a:	70 40       	sbci	r23, 0x00	; 0
    144c:	01 10       	cpse	r0, r1
    144e:	d8 f7       	brcc	.-10     	; 0x1446 <strnlen_P+0x2>
    1450:	80 95       	com	r24
    1452:	90 95       	com	r25
    1454:	8e 0f       	add	r24, r30
    1456:	9f 1f       	adc	r25, r31
    1458:	08 95       	ret

0000145a <memset>:
    145a:	dc 01       	movw	r26, r24
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <memset+0x6>
    145e:	6d 93       	st	X+, r22
    1460:	41 50       	subi	r20, 0x01	; 1
    1462:	50 40       	sbci	r21, 0x00	; 0
    1464:	e0 f7       	brcc	.-8      	; 0x145e <memset+0x4>
    1466:	08 95       	ret

00001468 <strnlen>:
    1468:	fc 01       	movw	r30, r24
    146a:	61 50       	subi	r22, 0x01	; 1
    146c:	70 40       	sbci	r23, 0x00	; 0
    146e:	01 90       	ld	r0, Z+
    1470:	01 10       	cpse	r0, r1
    1472:	d8 f7       	brcc	.-10     	; 0x146a <strnlen+0x2>
    1474:	80 95       	com	r24
    1476:	90 95       	com	r25
    1478:	8e 0f       	add	r24, r30
    147a:	9f 1f       	adc	r25, r31
    147c:	08 95       	ret

0000147e <fputc>:
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	fb 01       	movw	r30, r22
    1488:	23 81       	ldd	r18, Z+3	; 0x03
    148a:	21 fd       	sbrc	r18, 1
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <fputc+0x16>
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	9f ef       	ldi	r25, 0xFF	; 255
    1492:	2c c0       	rjmp	.+88     	; 0x14ec <fputc+0x6e>
    1494:	22 ff       	sbrs	r18, 2
    1496:	16 c0       	rjmp	.+44     	; 0x14c4 <fputc+0x46>
    1498:	46 81       	ldd	r20, Z+6	; 0x06
    149a:	57 81       	ldd	r21, Z+7	; 0x07
    149c:	24 81       	ldd	r18, Z+4	; 0x04
    149e:	35 81       	ldd	r19, Z+5	; 0x05
    14a0:	42 17       	cp	r20, r18
    14a2:	53 07       	cpc	r21, r19
    14a4:	44 f4       	brge	.+16     	; 0x14b6 <fputc+0x38>
    14a6:	a0 81       	ld	r26, Z
    14a8:	b1 81       	ldd	r27, Z+1	; 0x01
    14aa:	9d 01       	movw	r18, r26
    14ac:	2f 5f       	subi	r18, 0xFF	; 255
    14ae:	3f 4f       	sbci	r19, 0xFF	; 255
    14b0:	31 83       	std	Z+1, r19	; 0x01
    14b2:	20 83       	st	Z, r18
    14b4:	8c 93       	st	X, r24
    14b6:	26 81       	ldd	r18, Z+6	; 0x06
    14b8:	37 81       	ldd	r19, Z+7	; 0x07
    14ba:	2f 5f       	subi	r18, 0xFF	; 255
    14bc:	3f 4f       	sbci	r19, 0xFF	; 255
    14be:	37 83       	std	Z+7, r19	; 0x07
    14c0:	26 83       	std	Z+6, r18	; 0x06
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <fputc+0x6e>
    14c4:	8b 01       	movw	r16, r22
    14c6:	ec 01       	movw	r28, r24
    14c8:	fb 01       	movw	r30, r22
    14ca:	00 84       	ldd	r0, Z+8	; 0x08
    14cc:	f1 85       	ldd	r31, Z+9	; 0x09
    14ce:	e0 2d       	mov	r30, r0
    14d0:	09 95       	icall
    14d2:	89 2b       	or	r24, r25
    14d4:	e1 f6       	brne	.-72     	; 0x148e <fputc+0x10>
    14d6:	d8 01       	movw	r26, r16
    14d8:	16 96       	adiw	r26, 0x06	; 6
    14da:	8d 91       	ld	r24, X+
    14dc:	9c 91       	ld	r25, X
    14de:	17 97       	sbiw	r26, 0x07	; 7
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	17 96       	adiw	r26, 0x07	; 7
    14e4:	9c 93       	st	X, r25
    14e6:	8e 93       	st	-X, r24
    14e8:	16 97       	sbiw	r26, 0x06	; 6
    14ea:	ce 01       	movw	r24, r28
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <__ultoa_invert>:
    14f6:	fa 01       	movw	r30, r20
    14f8:	aa 27       	eor	r26, r26
    14fa:	28 30       	cpi	r18, 0x08	; 8
    14fc:	51 f1       	breq	.+84     	; 0x1552 <__ultoa_invert+0x5c>
    14fe:	20 31       	cpi	r18, 0x10	; 16
    1500:	81 f1       	breq	.+96     	; 0x1562 <__ultoa_invert+0x6c>
    1502:	e8 94       	clt
    1504:	6f 93       	push	r22
    1506:	6e 7f       	andi	r22, 0xFE	; 254
    1508:	6e 5f       	subi	r22, 0xFE	; 254
    150a:	7f 4f       	sbci	r23, 0xFF	; 255
    150c:	8f 4f       	sbci	r24, 0xFF	; 255
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	af 4f       	sbci	r26, 0xFF	; 255
    1512:	b1 e0       	ldi	r27, 0x01	; 1
    1514:	3e d0       	rcall	.+124    	; 0x1592 <__ultoa_invert+0x9c>
    1516:	b4 e0       	ldi	r27, 0x04	; 4
    1518:	3c d0       	rcall	.+120    	; 0x1592 <__ultoa_invert+0x9c>
    151a:	67 0f       	add	r22, r23
    151c:	78 1f       	adc	r23, r24
    151e:	89 1f       	adc	r24, r25
    1520:	9a 1f       	adc	r25, r26
    1522:	a1 1d       	adc	r26, r1
    1524:	68 0f       	add	r22, r24
    1526:	79 1f       	adc	r23, r25
    1528:	8a 1f       	adc	r24, r26
    152a:	91 1d       	adc	r25, r1
    152c:	a1 1d       	adc	r26, r1
    152e:	6a 0f       	add	r22, r26
    1530:	71 1d       	adc	r23, r1
    1532:	81 1d       	adc	r24, r1
    1534:	91 1d       	adc	r25, r1
    1536:	a1 1d       	adc	r26, r1
    1538:	20 d0       	rcall	.+64     	; 0x157a <__ultoa_invert+0x84>
    153a:	09 f4       	brne	.+2      	; 0x153e <__ultoa_invert+0x48>
    153c:	68 94       	set
    153e:	3f 91       	pop	r19
    1540:	2a e0       	ldi	r18, 0x0A	; 10
    1542:	26 9f       	mul	r18, r22
    1544:	11 24       	eor	r1, r1
    1546:	30 19       	sub	r19, r0
    1548:	30 5d       	subi	r19, 0xD0	; 208
    154a:	31 93       	st	Z+, r19
    154c:	de f6       	brtc	.-74     	; 0x1504 <__ultoa_invert+0xe>
    154e:	cf 01       	movw	r24, r30
    1550:	08 95       	ret
    1552:	46 2f       	mov	r20, r22
    1554:	47 70       	andi	r20, 0x07	; 7
    1556:	40 5d       	subi	r20, 0xD0	; 208
    1558:	41 93       	st	Z+, r20
    155a:	b3 e0       	ldi	r27, 0x03	; 3
    155c:	0f d0       	rcall	.+30     	; 0x157c <__ultoa_invert+0x86>
    155e:	c9 f7       	brne	.-14     	; 0x1552 <__ultoa_invert+0x5c>
    1560:	f6 cf       	rjmp	.-20     	; 0x154e <__ultoa_invert+0x58>
    1562:	46 2f       	mov	r20, r22
    1564:	4f 70       	andi	r20, 0x0F	; 15
    1566:	40 5d       	subi	r20, 0xD0	; 208
    1568:	4a 33       	cpi	r20, 0x3A	; 58
    156a:	18 f0       	brcs	.+6      	; 0x1572 <__ultoa_invert+0x7c>
    156c:	49 5d       	subi	r20, 0xD9	; 217
    156e:	31 fd       	sbrc	r19, 1
    1570:	40 52       	subi	r20, 0x20	; 32
    1572:	41 93       	st	Z+, r20
    1574:	02 d0       	rcall	.+4      	; 0x157a <__ultoa_invert+0x84>
    1576:	a9 f7       	brne	.-22     	; 0x1562 <__ultoa_invert+0x6c>
    1578:	ea cf       	rjmp	.-44     	; 0x154e <__ultoa_invert+0x58>
    157a:	b4 e0       	ldi	r27, 0x04	; 4
    157c:	a6 95       	lsr	r26
    157e:	97 95       	ror	r25
    1580:	87 95       	ror	r24
    1582:	77 95       	ror	r23
    1584:	67 95       	ror	r22
    1586:	ba 95       	dec	r27
    1588:	c9 f7       	brne	.-14     	; 0x157c <__ultoa_invert+0x86>
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	61 05       	cpc	r22, r1
    158e:	71 05       	cpc	r23, r1
    1590:	08 95       	ret
    1592:	9b 01       	movw	r18, r22
    1594:	ac 01       	movw	r20, r24
    1596:	0a 2e       	mov	r0, r26
    1598:	06 94       	lsr	r0
    159a:	57 95       	ror	r21
    159c:	47 95       	ror	r20
    159e:	37 95       	ror	r19
    15a0:	27 95       	ror	r18
    15a2:	ba 95       	dec	r27
    15a4:	c9 f7       	brne	.-14     	; 0x1598 <__ultoa_invert+0xa2>
    15a6:	62 0f       	add	r22, r18
    15a8:	73 1f       	adc	r23, r19
    15aa:	84 1f       	adc	r24, r20
    15ac:	95 1f       	adc	r25, r21
    15ae:	a0 1d       	adc	r26, r0
    15b0:	08 95       	ret

000015b2 <__prologue_saves__>:
    15b2:	2f 92       	push	r2
    15b4:	3f 92       	push	r3
    15b6:	4f 92       	push	r4
    15b8:	5f 92       	push	r5
    15ba:	6f 92       	push	r6
    15bc:	7f 92       	push	r7
    15be:	8f 92       	push	r8
    15c0:	9f 92       	push	r9
    15c2:	af 92       	push	r10
    15c4:	bf 92       	push	r11
    15c6:	cf 92       	push	r12
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	ca 1b       	sub	r28, r26
    15dc:	db 0b       	sbc	r29, r27
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	09 94       	ijmp

000015ea <__epilogue_restores__>:
    15ea:	2a 88       	ldd	r2, Y+18	; 0x12
    15ec:	39 88       	ldd	r3, Y+17	; 0x11
    15ee:	48 88       	ldd	r4, Y+16	; 0x10
    15f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    15f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    15f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    15f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    15f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    15fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    15fc:	b9 84       	ldd	r11, Y+9	; 0x09
    15fe:	c8 84       	ldd	r12, Y+8	; 0x08
    1600:	df 80       	ldd	r13, Y+7	; 0x07
    1602:	ee 80       	ldd	r14, Y+6	; 0x06
    1604:	fd 80       	ldd	r15, Y+5	; 0x05
    1606:	0c 81       	ldd	r16, Y+4	; 0x04
    1608:	1b 81       	ldd	r17, Y+3	; 0x03
    160a:	aa 81       	ldd	r26, Y+2	; 0x02
    160c:	b9 81       	ldd	r27, Y+1	; 0x01
    160e:	ce 0f       	add	r28, r30
    1610:	d1 1d       	adc	r29, r1
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	ed 01       	movw	r28, r26
    161e:	08 95       	ret

00001620 <_exit>:
    1620:	f8 94       	cli

00001622 <__stop_program>:
    1622:	ff cf       	rjmp	.-2      	; 0x1622 <__stop_program>
