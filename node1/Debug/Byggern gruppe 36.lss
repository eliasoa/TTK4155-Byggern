
Byggern gruppe 36.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000558  000005ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  000005f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012dd  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4f  00000000  00000000  00001a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094b  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00002eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ba  00000000  00000000  0000318c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000901  00000000  00000000  00003746  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004047  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e5       	ldi	r30, 0x58	; 88
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 30       	cpi	r26, 0x0A	; 10
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e0       	ldi	r26, 0x0A	; 10
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 31       	cpi	r26, 0x14	; 20
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  a6:	0c 94 aa 02 	jmp	0x554	; 0x554 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_timer>:
#include<util/delay.h>

#define OCR0_VALUE 1

void adc_timer(){						 // Timer for the ADC
	DDRD |= (1 << PD5); 
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	81 bb       	out	0x11, r24	; 17
	TCCR1A=(1 << COM1A0);			 	 // Toggle-mode
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B= (1 << WGM12)|(1 << CS10);	 // CTSmode, No scaler
  b8:	89 e0       	ldi	r24, 0x09	; 9
  ba:	8e bd       	out	0x2e, r24	; 46
	OCR0= 1;							 // Put OCR value
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	81 bf       	out	0x31, r24	; 49
  c0:	08 95       	ret

000000c2 <main>:



int main(void)
{
	xmem_init ();
  c2:	0e 94 14 01 	call	0x228	; 0x228 <xmem_init>
	adc_timer();
  c6:	0e 94 57 00 	call	0xae	; 0xae <adc_timer>
	UART_Init();
  ca:	0e 94 0a 01 	call	0x214	; 0x214 <UART_Init>
	oled_init();
  ce:	0e 94 b8 00 	call	0x170	; 0x170 <oled_init>
	oled_clear();
  d2:	0e 94 7d 00 	call	0xfa	; 0xfa <oled_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	9e e0       	ldi	r25, 0x0E	; 14
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x1a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x24>
  e6:	00 00       	nop
	_delay_ms(1000);
	while(1){
		oled_fill();
  e8:	0e 94 9b 00 	call	0x136	; 0x136 <oled_fill>
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <main+0x26>

000000ee <oled_write_command>:
void oled_write_command( uint8_t data ){
	oled_command_address[0] = data; 
}

void oled_write_data( uint8_t data ){
	oled_data_address[0] = data;
  ee:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_address>
  f2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_address+0x1>
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <oled_clear>:
}


void oled_clear( void ){
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
	for (int i = 0; i < 8; i++){
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	13 c0       	rjmp	.+38     	; 0x12a <oled_clear+0x30>
		oled_write_command(0xb0 + i);
 104:	8c 2f       	mov	r24, r28
 106:	80 55       	subi	r24, 0x50	; 80
 108:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
		for (int j = 0; j < 128; j++){
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	08 c0       	rjmp	.+16     	; 0x122 <oled_clear+0x28>
			oled_data_address[i] = 0x0;
 112:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data_address>
 116:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data_address+0x1>
 11a:	ec 0f       	add	r30, r28
 11c:	fd 1f       	adc	r31, r29
 11e:	10 82       	st	Z, r1


void oled_clear( void ){
	for (int i = 0; i < 8; i++){
		oled_write_command(0xb0 + i);
		for (int j = 0; j < 128; j++){
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	80 38       	cpi	r24, 0x80	; 128
 124:	91 05       	cpc	r25, r1
 126:	ac f3       	brlt	.-22     	; 0x112 <oled_clear+0x18>
	oled_data_address[0] = data;
}


void oled_clear( void ){
	for (int i = 0; i < 8; i++){
 128:	21 96       	adiw	r28, 0x01	; 1
 12a:	c8 30       	cpi	r28, 0x08	; 8
 12c:	d1 05       	cpc	r29, r1
 12e:	54 f3       	brlt	.-44     	; 0x104 <oled_clear+0xa>
		oled_write_command(0xb0 + i);
		for (int j = 0; j < 128; j++){
			oled_data_address[i] = 0x0;
		}
	}
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <oled_fill>:

void oled_fill( void ){
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
	for (int i = 0; i < 8; i++){
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	12 c0       	rjmp	.+36     	; 0x164 <oled_fill+0x2e>
		oled_write_command(0b10110000 + i);
 140:	8c 2f       	mov	r24, r28
 142:	80 55       	subi	r24, 0x50	; 80
 144:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
		for (int j = 0; j < 128; j++){
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	07 c0       	rjmp	.+14     	; 0x15c <oled_fill+0x26>
			oled_data_address[0] = 0xff;
 14e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data_address>
 152:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data_address+0x1>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	20 83       	st	Z, r18
}

void oled_fill( void ){
	for (int i = 0; i < 8; i++){
		oled_write_command(0b10110000 + i);
		for (int j = 0; j < 128; j++){
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	80 38       	cpi	r24, 0x80	; 128
 15e:	91 05       	cpc	r25, r1
 160:	b4 f3       	brlt	.-20     	; 0x14e <oled_fill+0x18>
		}
	}
}

void oled_fill( void ){
	for (int i = 0; i < 8; i++){
 162:	21 96       	adiw	r28, 0x01	; 1
 164:	c8 30       	cpi	r28, 0x08	; 8
 166:	d1 05       	cpc	r29, r1
 168:	5c f3       	brlt	.-42     	; 0x140 <oled_fill+0xa>
		oled_write_command(0b10110000 + i);
		for (int j = 0; j < 128; j++){
			oled_data_address[0] = 0xff;
		}
	}
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <oled_init>:


void oled_init()					// Yoinked from oled datasheet
{
	oled_write_command(0xae); // display off
 170:	8e ea       	ldi	r24, 0xAE	; 174
 172:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0xa1); //segment remap
 176:	81 ea       	ldi	r24, 0xA1	; 161
 178:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0xda); //common pads hardware: alternative
 17c:	8a ed       	ldi	r24, 0xDA	; 218
 17e:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0x12);
 182:	82 e1       	ldi	r24, 0x12	; 18
 184:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0xc8); //common output scan direction:com63~com0
 188:	88 ec       	ldi	r24, 0xC8	; 200
 18a:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0xa8); //multiplex ration mode:63
 18e:	88 ea       	ldi	r24, 0xA8	; 168
 190:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0x3f);
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0xd5); //display divide ratio/osc. freq. mode
 19a:	85 ed       	ldi	r24, 0xD5	; 213
 19c:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0x80);
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0x81); //contrast control
 1a6:	81 e8       	ldi	r24, 0x81	; 129
 1a8:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0x50);
 1ac:	80 e5       	ldi	r24, 0x50	; 80
 1ae:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0xd9); //set pre-charge period
 1b2:	89 ed       	ldi	r24, 0xD9	; 217
 1b4:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0x21);
 1b8:	81 e2       	ldi	r24, 0x21	; 33
 1ba:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0x20); //Set Memory Addressing Mode
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0x02);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0xdb); //VCOM deselect level mode
 1ca:	8b ed       	ldi	r24, 0xDB	; 219
 1cc:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0x30);
 1d0:	80 e3       	ldi	r24, 0x30	; 48
 1d2:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0xad); //master configuration
 1d6:	8d ea       	ldi	r24, 0xAD	; 173
 1d8:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0x00);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0xa4); //out follows RAM content
 1e2:	84 ea       	ldi	r24, 0xA4	; 164
 1e4:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0xa6); //set normal display
 1e8:	86 ea       	ldi	r24, 0xA6	; 166
 1ea:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
	oled_write_command(0xaf); // display on
 1ee:	8f ea       	ldi	r24, 0xAF	; 175
 1f0:	0e 94 77 00 	call	0xee	; 0xee <oled_write_command>
 1f4:	08 95       	ret

000001f6 <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 1f6:	5d 9b       	sbis	0x0b, 5	; 11
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <UART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1fa:	8c b9       	out	0x0c, r24	; 12
 1fc:	08 95       	ret

000001fe <UART_Receive>:


unsigned char UART_Receive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 1fe:	5f 9b       	sbis	0x0b, 7	; 11
 200:	fe cf       	rjmp	.-4      	; 0x1fe <UART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
 202:	8c b1       	in	r24, 0x0c	; 12
}
 204:	08 95       	ret

00000206 <UART_printf_link>:

void UART_printf_link()
{
	fdevopen((int (*)(char, FILE*))UART_Transmit, (int (*)(FILE*))UART_Receive);
 206:	6f ef       	ldi	r22, 0xFF	; 255
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	8b ef       	ldi	r24, 0xFB	; 251
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 1b 01 	call	0x236	; 0x236 <fdevopen>
 212:	08 95       	ret

00000214 <UART_Init>:

void UART_Init( void )
{
	/* Set baud rate */
	int ubrr = 31;
	UBRR0H = (unsigned char)(ubrr>>8);
 214:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)ubrr;
 216:	8f e1       	ldi	r24, 0x1F	; 31
 218:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 21a:	88 e1       	ldi	r24, 0x18	; 24
 21c:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 21e:	8e e8       	ldi	r24, 0x8E	; 142
 220:	80 bd       	out	0x20, r24	; 32
	//return 0;
	/* Link printtf to */
	UART_printf_link();
 222:	0e 94 03 01 	call	0x206	; 0x206 <UART_printf_link>
 226:	08 95       	ret

00000228 <xmem_init>:
#include "xmem.h"
#include <avr/io.h>


void xmem_init (){
	MCUCR |= (1 << SRE ); // enable XMEM
 228:	85 b7       	in	r24, 0x35	; 53
 22a:	80 68       	ori	r24, 0x80	; 128
 22c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2 ); // mask unused bits
 22e:	80 b7       	in	r24, 0x30	; 48
 230:	80 62       	ori	r24, 0x20	; 32
 232:	80 bf       	out	0x30, r24	; 48
 234:	08 95       	ret

00000236 <fdevopen>:
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	31 f4       	brne	.+12     	; 0x24e <fdevopen+0x18>
 242:	61 15       	cp	r22, r1
 244:	71 05       	cpc	r23, r1
 246:	19 f4       	brne	.+6      	; 0x24e <fdevopen+0x18>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	3a c0       	rjmp	.+116    	; 0x2c2 <fdevopen+0x8c>
 24e:	8b 01       	movw	r16, r22
 250:	ec 01       	movw	r28, r24
 252:	6e e0       	ldi	r22, 0x0E	; 14
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 66 01 	call	0x2cc	; 0x2cc <calloc>
 25e:	fc 01       	movw	r30, r24
 260:	89 2b       	or	r24, r25
 262:	91 f3       	breq	.-28     	; 0x248 <fdevopen+0x12>
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	83 83       	std	Z+3, r24	; 0x03
 268:	01 15       	cp	r16, r1
 26a:	11 05       	cpc	r17, r1
 26c:	71 f0       	breq	.+28     	; 0x28a <fdevopen+0x54>
 26e:	13 87       	std	Z+11, r17	; 0x0b
 270:	02 87       	std	Z+10, r16	; 0x0a
 272:	81 e8       	ldi	r24, 0x81	; 129
 274:	83 83       	std	Z+3, r24	; 0x03
 276:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 27a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 27e:	89 2b       	or	r24, r25
 280:	21 f4       	brne	.+8      	; 0x28a <fdevopen+0x54>
 282:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__data_end+0x1>
 286:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end>
 28a:	20 97       	sbiw	r28, 0x00	; 0
 28c:	c9 f0       	breq	.+50     	; 0x2c0 <fdevopen+0x8a>
 28e:	d1 87       	std	Z+9, r29	; 0x09
 290:	c0 87       	std	Z+8, r28	; 0x08
 292:	83 81       	ldd	r24, Z+3	; 0x03
 294:	82 60       	ori	r24, 0x02	; 2
 296:	83 83       	std	Z+3, r24	; 0x03
 298:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
 29c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
 2a0:	89 2b       	or	r24, r25
 2a2:	71 f4       	brne	.+28     	; 0x2c0 <fdevopen+0x8a>
 2a4:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__data_end+0x3>
 2a8:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__data_end+0x2>
 2ac:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end+0x4>
 2b0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x5>
 2b4:	89 2b       	or	r24, r25
 2b6:	21 f4       	brne	.+8      	; 0x2c0 <fdevopen+0x8a>
 2b8:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__data_end+0x5>
 2bc:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__data_end+0x4>
 2c0:	cf 01       	movw	r24, r30
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <calloc>:
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	86 9f       	mul	r24, r22
 2d6:	80 01       	movw	r16, r0
 2d8:	87 9f       	mul	r24, r23
 2da:	10 0d       	add	r17, r0
 2dc:	96 9f       	mul	r25, r22
 2de:	10 0d       	add	r17, r0
 2e0:	11 24       	eor	r1, r1
 2e2:	c8 01       	movw	r24, r16
 2e4:	0e 94 82 01 	call	0x304	; 0x304 <malloc>
 2e8:	ec 01       	movw	r28, r24
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	29 f0       	breq	.+10     	; 0x2f8 <calloc+0x2c>
 2ee:	a8 01       	movw	r20, r16
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	0e 94 a3 02 	call	0x546	; 0x546 <memset>
 2f8:	ce 01       	movw	r24, r28
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	08 95       	ret

00000304 <malloc>:
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	91 05       	cpc	r25, r1
 310:	10 f4       	brcc	.+4      	; 0x316 <malloc+0x12>
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__flp>
 31a:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__flp+0x1>
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	a0 e0       	ldi	r26, 0x00	; 0
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	30 97       	sbiw	r30, 0x00	; 0
 328:	19 f1       	breq	.+70     	; 0x370 <malloc+0x6c>
 32a:	40 81       	ld	r20, Z
 32c:	51 81       	ldd	r21, Z+1	; 0x01
 32e:	02 81       	ldd	r16, Z+2	; 0x02
 330:	13 81       	ldd	r17, Z+3	; 0x03
 332:	48 17       	cp	r20, r24
 334:	59 07       	cpc	r21, r25
 336:	c8 f0       	brcs	.+50     	; 0x36a <malloc+0x66>
 338:	84 17       	cp	r24, r20
 33a:	95 07       	cpc	r25, r21
 33c:	69 f4       	brne	.+26     	; 0x358 <malloc+0x54>
 33e:	10 97       	sbiw	r26, 0x00	; 0
 340:	31 f0       	breq	.+12     	; 0x34e <malloc+0x4a>
 342:	12 96       	adiw	r26, 0x02	; 2
 344:	0c 93       	st	X, r16
 346:	12 97       	sbiw	r26, 0x02	; 2
 348:	13 96       	adiw	r26, 0x03	; 3
 34a:	1c 93       	st	X, r17
 34c:	27 c0       	rjmp	.+78     	; 0x39c <malloc+0x98>
 34e:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <__flp>
 352:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <__flp+0x1>
 356:	22 c0       	rjmp	.+68     	; 0x39c <malloc+0x98>
 358:	21 15       	cp	r18, r1
 35a:	31 05       	cpc	r19, r1
 35c:	19 f0       	breq	.+6      	; 0x364 <malloc+0x60>
 35e:	42 17       	cp	r20, r18
 360:	53 07       	cpc	r21, r19
 362:	18 f4       	brcc	.+6      	; 0x36a <malloc+0x66>
 364:	9a 01       	movw	r18, r20
 366:	bd 01       	movw	r22, r26
 368:	ef 01       	movw	r28, r30
 36a:	df 01       	movw	r26, r30
 36c:	f8 01       	movw	r30, r16
 36e:	db cf       	rjmp	.-74     	; 0x326 <malloc+0x22>
 370:	21 15       	cp	r18, r1
 372:	31 05       	cpc	r19, r1
 374:	f9 f0       	breq	.+62     	; 0x3b4 <malloc+0xb0>
 376:	28 1b       	sub	r18, r24
 378:	39 0b       	sbc	r19, r25
 37a:	24 30       	cpi	r18, 0x04	; 4
 37c:	31 05       	cpc	r19, r1
 37e:	80 f4       	brcc	.+32     	; 0x3a0 <malloc+0x9c>
 380:	8a 81       	ldd	r24, Y+2	; 0x02
 382:	9b 81       	ldd	r25, Y+3	; 0x03
 384:	61 15       	cp	r22, r1
 386:	71 05       	cpc	r23, r1
 388:	21 f0       	breq	.+8      	; 0x392 <malloc+0x8e>
 38a:	fb 01       	movw	r30, r22
 38c:	93 83       	std	Z+3, r25	; 0x03
 38e:	82 83       	std	Z+2, r24	; 0x02
 390:	04 c0       	rjmp	.+8      	; 0x39a <malloc+0x96>
 392:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__flp+0x1>
 396:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__flp>
 39a:	fe 01       	movw	r30, r28
 39c:	32 96       	adiw	r30, 0x02	; 2
 39e:	44 c0       	rjmp	.+136    	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 3a0:	fe 01       	movw	r30, r28
 3a2:	e2 0f       	add	r30, r18
 3a4:	f3 1f       	adc	r31, r19
 3a6:	81 93       	st	Z+, r24
 3a8:	91 93       	st	Z+, r25
 3aa:	22 50       	subi	r18, 0x02	; 2
 3ac:	31 09       	sbc	r19, r1
 3ae:	39 83       	std	Y+1, r19	; 0x01
 3b0:	28 83       	st	Y, r18
 3b2:	3a c0       	rjmp	.+116    	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 3b4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__brkval>
 3b8:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__brkval+0x1>
 3bc:	23 2b       	or	r18, r19
 3be:	41 f4       	brne	.+16     	; 0x3d0 <malloc+0xcc>
 3c0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 3c4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 3c8:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__brkval+0x1>
 3cc:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__brkval>
 3d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3d8:	21 15       	cp	r18, r1
 3da:	31 05       	cpc	r19, r1
 3dc:	41 f4       	brne	.+16     	; 0x3ee <malloc+0xea>
 3de:	2d b7       	in	r18, 0x3d	; 61
 3e0:	3e b7       	in	r19, 0x3e	; 62
 3e2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 3e6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 3ea:	24 1b       	sub	r18, r20
 3ec:	35 0b       	sbc	r19, r21
 3ee:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__brkval>
 3f2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__brkval+0x1>
 3f6:	e2 17       	cp	r30, r18
 3f8:	f3 07       	cpc	r31, r19
 3fa:	a0 f4       	brcc	.+40     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 3fc:	2e 1b       	sub	r18, r30
 3fe:	3f 0b       	sbc	r19, r31
 400:	28 17       	cp	r18, r24
 402:	39 07       	cpc	r19, r25
 404:	78 f0       	brcs	.+30     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 406:	ac 01       	movw	r20, r24
 408:	4e 5f       	subi	r20, 0xFE	; 254
 40a:	5f 4f       	sbci	r21, 0xFF	; 255
 40c:	24 17       	cp	r18, r20
 40e:	35 07       	cpc	r19, r21
 410:	48 f0       	brcs	.+18     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 412:	4e 0f       	add	r20, r30
 414:	5f 1f       	adc	r21, r31
 416:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <__brkval+0x1>
 41a:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <__brkval>
 41e:	81 93       	st	Z+, r24
 420:	91 93       	st	Z+, r25
 422:	02 c0       	rjmp	.+4      	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 424:	e0 e0       	ldi	r30, 0x00	; 0
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	cf 01       	movw	r24, r30
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	08 95       	ret

00000434 <free>:
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	09 f4       	brne	.+2      	; 0x43e <free+0xa>
 43c:	81 c0       	rjmp	.+258    	; 0x540 <__stack+0x41>
 43e:	fc 01       	movw	r30, r24
 440:	32 97       	sbiw	r30, 0x02	; 2
 442:	13 82       	std	Z+3, r1	; 0x03
 444:	12 82       	std	Z+2, r1	; 0x02
 446:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__flp>
 44a:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__flp+0x1>
 44e:	10 97       	sbiw	r26, 0x00	; 0
 450:	81 f4       	brne	.+32     	; 0x472 <free+0x3e>
 452:	20 81       	ld	r18, Z
 454:	31 81       	ldd	r19, Z+1	; 0x01
 456:	82 0f       	add	r24, r18
 458:	93 1f       	adc	r25, r19
 45a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__brkval>
 45e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__brkval+0x1>
 462:	28 17       	cp	r18, r24
 464:	39 07       	cpc	r19, r25
 466:	51 f5       	brne	.+84     	; 0x4bc <free+0x88>
 468:	f0 93 11 01 	sts	0x0111, r31	; 0x800111 <__brkval+0x1>
 46c:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__brkval>
 470:	67 c0       	rjmp	.+206    	; 0x540 <__stack+0x41>
 472:	ed 01       	movw	r28, r26
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	ce 17       	cp	r28, r30
 47a:	df 07       	cpc	r29, r31
 47c:	40 f4       	brcc	.+16     	; 0x48e <free+0x5a>
 47e:	4a 81       	ldd	r20, Y+2	; 0x02
 480:	5b 81       	ldd	r21, Y+3	; 0x03
 482:	9e 01       	movw	r18, r28
 484:	41 15       	cp	r20, r1
 486:	51 05       	cpc	r21, r1
 488:	f1 f0       	breq	.+60     	; 0x4c6 <free+0x92>
 48a:	ea 01       	movw	r28, r20
 48c:	f5 cf       	rjmp	.-22     	; 0x478 <free+0x44>
 48e:	d3 83       	std	Z+3, r29	; 0x03
 490:	c2 83       	std	Z+2, r28	; 0x02
 492:	40 81       	ld	r20, Z
 494:	51 81       	ldd	r21, Z+1	; 0x01
 496:	84 0f       	add	r24, r20
 498:	95 1f       	adc	r25, r21
 49a:	c8 17       	cp	r28, r24
 49c:	d9 07       	cpc	r29, r25
 49e:	59 f4       	brne	.+22     	; 0x4b6 <free+0x82>
 4a0:	88 81       	ld	r24, Y
 4a2:	99 81       	ldd	r25, Y+1	; 0x01
 4a4:	84 0f       	add	r24, r20
 4a6:	95 1f       	adc	r25, r21
 4a8:	02 96       	adiw	r24, 0x02	; 2
 4aa:	91 83       	std	Z+1, r25	; 0x01
 4ac:	80 83       	st	Z, r24
 4ae:	8a 81       	ldd	r24, Y+2	; 0x02
 4b0:	9b 81       	ldd	r25, Y+3	; 0x03
 4b2:	93 83       	std	Z+3, r25	; 0x03
 4b4:	82 83       	std	Z+2, r24	; 0x02
 4b6:	21 15       	cp	r18, r1
 4b8:	31 05       	cpc	r19, r1
 4ba:	29 f4       	brne	.+10     	; 0x4c6 <free+0x92>
 4bc:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <__flp+0x1>
 4c0:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <__flp>
 4c4:	3d c0       	rjmp	.+122    	; 0x540 <__stack+0x41>
 4c6:	e9 01       	movw	r28, r18
 4c8:	fb 83       	std	Y+3, r31	; 0x03
 4ca:	ea 83       	std	Y+2, r30	; 0x02
 4cc:	49 91       	ld	r20, Y+
 4ce:	59 91       	ld	r21, Y+
 4d0:	c4 0f       	add	r28, r20
 4d2:	d5 1f       	adc	r29, r21
 4d4:	ec 17       	cp	r30, r28
 4d6:	fd 07       	cpc	r31, r29
 4d8:	61 f4       	brne	.+24     	; 0x4f2 <free+0xbe>
 4da:	80 81       	ld	r24, Z
 4dc:	91 81       	ldd	r25, Z+1	; 0x01
 4de:	84 0f       	add	r24, r20
 4e0:	95 1f       	adc	r25, r21
 4e2:	02 96       	adiw	r24, 0x02	; 2
 4e4:	e9 01       	movw	r28, r18
 4e6:	99 83       	std	Y+1, r25	; 0x01
 4e8:	88 83       	st	Y, r24
 4ea:	82 81       	ldd	r24, Z+2	; 0x02
 4ec:	93 81       	ldd	r25, Z+3	; 0x03
 4ee:	9b 83       	std	Y+3, r25	; 0x03
 4f0:	8a 83       	std	Y+2, r24	; 0x02
 4f2:	e0 e0       	ldi	r30, 0x00	; 0
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	12 96       	adiw	r26, 0x02	; 2
 4f8:	8d 91       	ld	r24, X+
 4fa:	9c 91       	ld	r25, X
 4fc:	13 97       	sbiw	r26, 0x03	; 3
 4fe:	00 97       	sbiw	r24, 0x00	; 0
 500:	19 f0       	breq	.+6      	; 0x508 <__stack+0x9>
 502:	fd 01       	movw	r30, r26
 504:	dc 01       	movw	r26, r24
 506:	f7 cf       	rjmp	.-18     	; 0x4f6 <free+0xc2>
 508:	8d 91       	ld	r24, X+
 50a:	9c 91       	ld	r25, X
 50c:	11 97       	sbiw	r26, 0x01	; 1
 50e:	9d 01       	movw	r18, r26
 510:	2e 5f       	subi	r18, 0xFE	; 254
 512:	3f 4f       	sbci	r19, 0xFF	; 255
 514:	82 0f       	add	r24, r18
 516:	93 1f       	adc	r25, r19
 518:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__brkval>
 51c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__brkval+0x1>
 520:	28 17       	cp	r18, r24
 522:	39 07       	cpc	r19, r25
 524:	69 f4       	brne	.+26     	; 0x540 <__stack+0x41>
 526:	30 97       	sbiw	r30, 0x00	; 0
 528:	29 f4       	brne	.+10     	; 0x534 <__stack+0x35>
 52a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__flp+0x1>
 52e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__flp>
 532:	02 c0       	rjmp	.+4      	; 0x538 <__stack+0x39>
 534:	13 82       	std	Z+3, r1	; 0x03
 536:	12 82       	std	Z+2, r1	; 0x02
 538:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <__brkval+0x1>
 53c:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <__brkval>
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <memset>:
 546:	dc 01       	movw	r26, r24
 548:	01 c0       	rjmp	.+2      	; 0x54c <memset+0x6>
 54a:	6d 93       	st	X+, r22
 54c:	41 50       	subi	r20, 0x01	; 1
 54e:	50 40       	sbci	r21, 0x00	; 0
 550:	e0 f7       	brcc	.-8      	; 0x54a <memset+0x4>
 552:	08 95       	ret

00000554 <_exit>:
 554:	f8 94       	cli

00000556 <__stop_program>:
 556:	ff cf       	rjmp	.-2      	; 0x556 <__stop_program>
